[{"/Users/lisahenn/projects/helsing-client/src/index.js":"1","/Users/lisahenn/projects/helsing-client/src/contexts/HelsingContext.js":"2","/Users/lisahenn/projects/helsing-client/src/components/App/App.js":"3","/Users/lisahenn/projects/helsing-client/src/services/HelsingAPIService.js":"4","/Users/lisahenn/projects/helsing-client/src/routes/LandingPage/LandingPage.js":"5","/Users/lisahenn/projects/helsing-client/src/routes/NotFoundPage/NotFoundPage.js":"6","/Users/lisahenn/projects/helsing-client/src/components/MainNav/MainNav.js":"7","/Users/lisahenn/projects/helsing-client/src/routes/Active/Active.js":"8","/Users/lisahenn/projects/helsing-client/src/routes/Unassigned/Unassigned.js":"9","/Users/lisahenn/projects/helsing-client/src/routes/ReserveItemPage/ReserveItemPage.js":"10","/Users/lisahenn/projects/helsing-client/src/routes/ItemsNeeded/ItemsNeeded.js":"11","/Users/lisahenn/projects/helsing-client/src/components/SearchBar/SearchBar.js":"12","/Users/lisahenn/projects/helsing-client/src/routes/Completed/Completed.js":"13","/Users/lisahenn/projects/helsing-client/src/routes/AddReserveStudy/AddReserveStudy.js":"14","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentItemPage/SustainmentItemPage.js":"15","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearOne/SustainmentYearOne.js":"16","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentCompleted/SustainmentCompleted.js":"17","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearThree/SustainmentYearThree.js":"18","/Users/lisahenn/projects/helsing-client/src/routes/DraftBilled/DraftBilled.js":"19","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearTwo/SustainmentYearTwo.js":"20","/Users/lisahenn/projects/helsing-client/src/routes/TMItemPage/TMItemPage.js":"21","/Users/lisahenn/projects/helsing-client/src/routes/AddTM/AddTM.js":"22","/Users/lisahenn/projects/helsing-client/src/routes/TMQueue/TMQueue.js":"23","/Users/lisahenn/projects/helsing-client/src/routes/TMCompleted/TMCompleted.js":"24","/Users/lisahenn/projects/helsing-client/src/routes/AddEmployee/AddEmployee.js":"25","/Users/lisahenn/projects/helsing-client/src/routes/AddSustainment/AddSustainment.js":"26","/Users/lisahenn/projects/helsing-client/src/config.js":"27"},{"size":377,"mtime":1610850435000,"results":"28","hashOfConfig":"29"},{"size":1532,"mtime":1611030994000,"results":"30","hashOfConfig":"29"},{"size":5289,"mtime":1612338767000,"results":"31","hashOfConfig":"29"},{"size":5569,"mtime":1613025815000,"results":"32","hashOfConfig":"29"},{"size":0,"mtime":1609911205000,"results":"33","hashOfConfig":"29"},{"size":0,"mtime":1609914119000,"results":"34","hashOfConfig":"29"},{"size":1121,"mtime":1611810367000,"results":"35","hashOfConfig":"29"},{"size":1879,"mtime":1612335482000,"results":"36","hashOfConfig":"29"},{"size":1828,"mtime":1612336399000,"results":"37","hashOfConfig":"29"},{"size":14068,"mtime":1613456010000,"results":"38","hashOfConfig":"29"},{"size":1810,"mtime":1612335785000,"results":"39","hashOfConfig":"29"},{"size":719,"mtime":1612334671000,"results":"40","hashOfConfig":"29"},{"size":1468,"mtime":1612335585000,"results":"41","hashOfConfig":"29"},{"size":9544,"mtime":1613455421000,"results":"42","hashOfConfig":"29"},{"size":12782,"mtime":1614464639000,"results":"43","hashOfConfig":"29"},{"size":1460,"mtime":1612335992000,"results":"44","hashOfConfig":"29"},{"size":1553,"mtime":1612335910000,"results":"45","hashOfConfig":"29"},{"size":1552,"mtime":1612336057000,"results":"46","hashOfConfig":"29"},{"size":1487,"mtime":1612335692000,"results":"47","hashOfConfig":"29"},{"size":1535,"mtime":1612336147000,"results":"48","hashOfConfig":"29"},{"size":7972,"mtime":1614465021000,"results":"49","hashOfConfig":"29"},{"size":5317,"mtime":1614464808000,"results":"50","hashOfConfig":"29"},{"size":1367,"mtime":1612336403000,"results":"51","hashOfConfig":"29"},{"size":1403,"mtime":1612336241000,"results":"52","hashOfConfig":"29"},{"size":3487,"mtime":1615079126000,"results":"53","hashOfConfig":"29"},{"size":5709,"mtime":1614464538000,"results":"54","hashOfConfig":"29"},{"size":105,"mtime":1612243886000,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"18x38j7",{"filePath":"59","messages":"60","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":3,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":2,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":2,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"58"},{"filePath":"120","messages":"121","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"58"},{"filePath":"123","messages":"124","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"58"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lisahenn/projects/helsing-client/src/index.js",[],["130","131"],"/Users/lisahenn/projects/helsing-client/src/contexts/HelsingContext.js",["132"],"import React, { Component } from 'react'\n\nconst HelsingContext = React.createContext({\n  searchQuery: null,\n  studies: [],\n  sustainment: [],\n  timeAndMaterial: [],\n  setSearchQuery: () => {},\n  clearSearchQuery: () => {},\n  setStudies: () => {},\n  setSustainment: () => {},\n  setTimeAndMaterial: () => {}\n})\n\nexport default Helsingcontext\n\nexport class HelsingProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = \n      props.testState || {\n        searchQuery: null,\n        studies: [],\n        sustainment: [],\n        timeAndMaterial: []\n    }; \n  }\n\n  setSearchQuery = searchQuery => {\n    this.setState({ searchQuery })\n  }\n\n  clearSearchQuery = () => {\n    this.setState({ searchQuery: null })\n  }\n\n  setStudies = studies => {\n    this.setState({ studies })\n  }\n\n  setSustainment = sustainment => {\n    this.setState({ sustainment })\n  }\n\n  setTimeAndMaterial = timeAndMaterial => {\n    this.setState({ timeAndMaterial })\n  }\n\n  render() {\n    const value = {\n      searchQuery: this.state.searchQuery,\n      studies: this.state.studies,\n      sustainment: this.state.sustainment,\n      timeAndMaterial: this.state.timeAndMaterial,\n      setSearchQuery: this.setSearchQuery,\n      clearSearchQuery: this.clearSearchQuery,\n      setStudies: this.setStudies,\n      setSustainment: this.setSustainment,\n      setTimeAndMaterial: this.setTimeAndMaterial\n    }\n\n    return (\n      <HelsingContext.Provider value={value}>\n        {this.props.children}\n      </HelsingContext.Provider>\n    )\n  }\n}","/Users/lisahenn/projects/helsing-client/src/components/App/App.js",[],"/Users/lisahenn/projects/helsing-client/src/services/HelsingAPIService.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/LandingPage/LandingPage.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/NotFoundPage/NotFoundPage.js",[],"/Users/lisahenn/projects/helsing-client/src/components/MainNav/MainNav.js",["133","134","135"],"import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';f\nimport './MainNav.css'\n\nclass MainNav extends Component {\n  render() {\n  return (\n    <nav className='MainNav'>\n    <div className='MainNav-Style'>\n    <ul className='Main-MainNav'>\n      <li className='MainNav-link'>\n      <Link style={{ textDecoration: 'none' }} to={'/'}>\n        Home\n      </Link>\n      </li>\n      <li className='MainNav-link'>\n      <Link style={{ textDecoration: 'none' }} to={'/reservestudies/active'}>\n        Reserve Studies\n      </Link>\n      </li>\n      <li className='MainNav-link'>\n      <Link style={{ textDecoration: 'none' }} to={'/sustainment/year3'}>\n        Sustainment\n      </Link>\n      </li>\n      <li className='MainNav-link'>\n      <Link\n        style={{ textDecoration: 'none' }}\n        to={'/timeandmaterial/active'}>\n        {'T&M'}\n      </Link>\n      </li>\n      <li className='MainNav-link'>\n      <Link\n        style={{ textDecoration: 'none' }}\n        to={'/employees'}>\n        Employees\n      </Link>\n      </li>\n      </ul>\n    </div>\n    </nav>\n  );\n  }\n}\n\nexport default MainNav","/Users/lisahenn/projects/helsing-client/src/routes/Active/Active.js",["136","137","138"],"import React, { Component } from 'react'\nimport ReserveItem from '../../components/ReserveItem'\nimport ReserveNav from '../../components/ReserveNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './Active.css'\n\n\nclass Active extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const ActiveList = this.context.studies.filter(study => {\n        study.csa === true &&\n        study.scope === true &&\n        study.retainer === true &&\n        study.ccrs === true &&\n        study.questionnaire === true &&\n        study.budget === true &&\n        study.site_plan === true &&\n        study.reserve_study === true &&\n        study.annual_review === true &&\n        study.income_statement === true &&\n        study.balance_sheet === true &&\n        study.assigned_to !== null &&\n        study.draft_billed_date === null &&\n        study.final_billed_date === null\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredActiveList = ActiveList.filter(study => {\n          study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)\n        })\n        this.setState({\n          studies: FilteredActiveList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: ActiveList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Active'>\n        <ReserveNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <ReserveItem key={study.rsId} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default Active","/Users/lisahenn/projects/helsing-client/src/routes/Unassigned/Unassigned.js",["139","140","141"],"import React, { Component } from 'react'\nimport ReserveItem from '../../components/ReserveItem'\nimport ReserveNav from '../../components/ReserveNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './Unassigned.css'\n\n\nclass Unassigned extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const UnassignedList = this.context.studies.filter(study => {\n        study.csa === true &&\n        study.scope === true &&\n        study.retainer === true &&\n        study.ccrs === true &&\n        study.questionnaire === true &&\n        study.budget === true &&\n        study.site_plan === true &&\n        study.reserve_study === true &&\n        study.annual_review === true &&\n        study.income_statement === true &&\n        study.balance_sheet === true &&\n        study.assigned_to === null\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredUnassignedList = UnassignedList.filter(study => {\n          study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)\n        })\n        this.setState({\n          studies: FilteredUnassignedList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: UnassignedList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Unassigned'>\n        <ReserveNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <ReserveItem key={study.rs_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default Unassigned","/Users/lisahenn/projects/helsing-client/src/routes/ReserveItemPage/ReserveItemPage.js",["142","143","144","145"],"import React, { Component } from 'react'\nimport HelsingAPIService from '../../services/HelsingAPIService'\nimport ReserveNav from '../../components/ReserveNav'\nimport Mailto from 'reactv16-mailto'\nimport './ReserveItemPage.css'\n\nclass ReserveItemPage extends Component {\n\n  static defaultProps = {\n    match: { params: {} },\n  }\n\n  state = {\n    rs_id: null,\n    association: null,\n    manager_firstname: null,\n    manager_email: null,\n    assigned_to: null,\n    date_added: null,\n    fy_end: null,\n    client_number: null,\n    date_in_queue: null,\n    total_price: null,\n    csa: null,\n    scope: null,\n    retainer: null,\n    ccrs: null,\n    hoa_questionnaire: null,\n    budget: null,\n    site_plan: null,\n    reserve_study: null,\n    annual_review: null,\n    income_statement: null,\n    balance_sheet: null,\n    draft_billed: null,\n    final_billed: null,\n    draft_billed_date: null,\n    final_billed_date: null,\n    additional_notes: null,\n    e_id: null,\n    employee_firstname: null,\n    employee_lastname: null,\n    employee_email: null,\n    employees: [],\n    updated: false,\n    updatedType: null\n  }\n\n  componentDidMount() {\n    const { reservestudyId } = this.props.match.params\n    HelsingAPIService.getRSById(reservestudyId)\n      .then(study => {\n        this.setState({\n          ...study\n        })\n        HelsingAPIService.getEmployeeById(study.assigned_to)\n        .then(employee => {\n          this.setState({\n          ...employee\n      })\n    })\n    HelsingAPIService.getAllEmployees()\n        .then(employees => {\n            this.setState({\n                employees\n            })\n        })\n  })\n}\n\n  renderManagerEmailBody() {\n    const items = ['csa', 'scope', 'retainer', 'ccrs', 'hoa_questionnaire', 'budget', 'site_plan', 'reserve_study', 'annual_review', 'income_statement', 'balance_sheet']\n    const itemNames = {\n        csa: 'Consulting Services Agreement',\n        scope: 'Scope',\n        retainer: 'Retainer',\n        ccrs: 'CC&Rs',\n        hoa_questionnaire: 'HOA Questionnaire',\n        budget: 'HOA Budget',\n        site_plan: 'Site Plan',\n        reserve_study: 'Previous Reserve Study',\n        annual_review: 'Annual Review/Year End Financials',\n        income_statement: 'Income Statement',\n        balance_sheet: 'Balance Sheet'\n    }\n    for (let i=0; i < items.length; i++) {\n        if(!this.state[items[i]]) {\n            items.splice[i, 1]\n        }\n    }\n\n    if(items.length > 0) {\n        let list = ''\n        for (let i=0; i < items.length; i++) {\n            if (i=0) {\n                list += itemNames[items[i]]\n            }\n            else {\n                list+= `, ${itemNames[items[i]]}`\n            }\n        }\n        let body = `\n        Hi ${this.state.manager_firstname},\n\n        This email is in regards to ${this.state.association}. We are progressing on the reserve study report, however we are still waiting to receive the following items:\n\n        ${list}\n\n        Please let us know if any of the above items are available. \n    `\n    return body\n    }\n    else {\n        return null\n    }\n  }\n\n  renderAnalystEmailBody() {\n    if(!this.state.draft_billed) {\n        let body = `\n            Hi ${this.state.employee_firstname},\n\n            Do you have a status update for ${this.state.association}? Are we ready to proceed with billing the draft?\n        `\n        return body\n    }\n    else if (this.state.draft_billed && !this.state.final_billed) {\n        let body = `\n            Hi ${this.state.employee_firstname},\n\n            Do you have a status update for ${this.state.association}? Are we ready to proceed with final billing?\n        `\n        return body\n    }\n  }\n\n  handleUpdate = () => {\n    ev.preventDefault()\n    const { rs_id, association, manager_firstname, manager_email, assigned_to, fy_end, client_number, total_price, csa, scope, retainer, ccrs, hoa_questionnaire, budget, site_plan, reserve_study, annual_review, income_statement, balance_sheet, draft_billed, final_billed, additional_notes } = this.state\n    let date_in_queue = this.state.date_in_queue\n    if (csa !== null && scope !== null && retainer !== null && ccrs !== null && hoa_questionnaire !== null && budget !== null && site_plan !==null && reserve_study !== null && annual_review !== null && income_statement !== null && balance_sheet !== null && date_in_queue === null) {\n        date_in_queue = new Date()\n    }\n    const updatedInfo = { association, manager_firstname, manager_email, assigned_to, fy_end, client_number, total_price, csa, scope, retainer, ccrs, hoa_questionnaire, budget, site_plan, reserve_study, annual_review, income_statement, balance_sheet, draft_billed, final_billed, date_in_queue, additional_notes }\n    HelsingAPIService.updateReserveStudy(rs_id, updatedInfo)\n    this.setState({\n      updated: true,\n      updatedType: 'update'\n    })\n  }\n\n  handleDelete = () => {\n    const { rs_id } = this.state\n    HelsingAPIService.deleteReserveStudy(rs_id)\n    this.setState({\n      updated: true,\n      updatedType: 'delete'\n    })\n  }\n\n  componentWillUnmount() {\n      this.setState({\n        updated: false,\n        updatedType: null\n      })\n  }\n\n  render() {\n    return (\n        <div>\n        <ReserveNav/>\n        {(!this.state.updated) ?  \n        <form className='reserve-study' onSubmit={this.handleUpdate}>\n        <fieldset>\n          <legend>Reserve Study Info</legend>\n          <p>Added to job tracker on {this.state.date_added}</p>\n          {this.state.date_in_queue && \n            <p>Added to active queue on {this.state.date_in_queue}</p>}\n          {this.state.draft_billed && \n            <p>Draft billed on {this.state.draft_billed_date}</p>}\n          {this.state.final_billed && \n            <p>Final billed on {this.state.final_billed_date}</p>}\n          <label htmlFor='association_name'>\n                Association Name\n              </label>\n           <input\n                className='association_name'\n                value={this.state.association}\n                onChange={(e) => {this.setState({association: e.target.value})}}\n                type='text'\n                id='association_name'/>\n            <label htmlFor='client_number'>\n                Client #\n              </label>\n           <input\n                className='client_number'\n                value={this.state.client_number}\n                onChange={(e) => {this.setState({client_number: e.target.value})}}\n                type='text'\n                id='client_number'/>\n            <label htmlFor='client_number'>\n                FY End\n              </label>\n           <input\n                className='fy_end'\n                value={this.state.fy_end}\n                onChange={(e) => {this.setState({fy_end: e.target.value})}}\n                type='text'\n                id='fy_end'/>\n            <label htmlFor='total_price'>\n                Total Price\n              </label>\n           <input\n                className='total_price'\n                value={this.state.total_price}\n                onChange={(e) => {this.setState({total_price: e.target.value})}}\n                type='text'\n                id='total_price'/>\n           <label htmlFor='manager_firstname'>\n                Manager First Name\n              </label>\n           <input\n                className='manager_firstname'\n                value={this.state.manager_firstname}\n                onChange={(e) => {this.setState({manager_firstname: e.target.value})}}\n                type='text'\n                id='manager_firstname'/>\n          <label htmlFor='manager_email'>\n                Manager Email\n              </label>\n           <input\n                className='manager_email'\n                value={this.state.manager_email}\n                onChange={(e) => {this.setState({manager_email: e.target.value})}}\n                type='text'\n                id='manager_email'/>\n          <label htmlFor=\"assigned_to\">Assigned to:</label>\n          <select defaultValue={this.state.e_id} className=\"assigned_to\" id=\"assigned_to\" onChange={(e) => this.setState({e_id: e.target.value})}>\n              {this.state.employees.map(employee => {\n                  return (\n                      <option value={employee.e_id}>{employee.employee_firstname}</option>\n                  )\n              })}\n          </select>\n          <label htmlFor=\"csa\">CSA</label>\n          <select defaultValue={this.state.csa} className=\"csa\" id=\"csa\" onChange={(e) => this.setState({csa: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"scope\">Scope</label>\n          <select defaultValue={this.state.scope} className=\"scope\" id=\"scope\" onChange={(e) => this.setState({scope: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"retainer\">Retainer</label>\n          <select defaultValue={this.state.retainer} className=\"retainer\" id=\"retainer\" onChange={(e) => this.setState({retainer: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"ccrs\">{'CC&Rs'}</label>\n          <select defaultValue={this.state.ccrs} className=\"ccrs\" id=\"ccrs\" onChange={(e) => this.setState({ccrs: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"hoa_questionnaire\">HOA Questionnaire</label>\n          <select defaultValue={this.state.hoa_questionnaire} className=\"hoa_questionnaire\" id=\"hoa_questionnaire\" onChange={(e) => this.setState({hoa_questionnaire: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"budget\">Budget</label>\n          <select defaultValue={this.state.budget} className=\"budget\" id=\"budget\" onChange={(e) => this.setState({budget: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"site_plan\">Site Plan</label>\n          <select defaultValue={this.state.site_plan} className=\"site_plan\" id=\"site_plan\" onChange={(e) => this.setState({site_plan: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"reserve_study\">Previous Reserve Studies</label>\n          <select defaultValue={this.state.reserve_study} className=\"reserve_study\" id=\"reserve_study\" onChange={(e) => this.setState({reserve_study: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"annual_review\">Annual Review</label>\n          <select defaultValue={this.state.annual_review} className=\"annual_review\" id=\"annual_review\" onChange={(e) => this.setState({annual_review: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"income_statement\">Income Statement</label>\n          <select defaultValue={this.state.income_statement} className=\"income_statement\" id=\"income_statement\" onChange={(e) => this.setState({income_statement: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"balance_sheet\">Balance Sheet</label>\n          <select defaultValue={this.state.balance_sheet} className=\"balance_sheet\" id=\"balance_sheet\" onChange={(e) => this.setState({balance_sheet: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"draft_billed\">Draft Billed?</label>\n          <select defaultValue={this.state.draft_billed} className=\"draft_billed\" id=\"draft_billed\" onChange={(e) => this.setState({draft_billed: e.target.value})}>\n                <option value={true}>True</option>\n                <option value={false}>False</option>\n          </select>\n          <label htmlFor=\"final_billed\">Final Billed?</label>\n          <select defaultValue={this.state.final_billed} className=\"final_billed\" id=\"final_billed\" onChange={(e) => this.setState({final_billed: e.target.value})}>\n                <option value={true}>True</option>\n                <option value={false}>False</option>\n          </select>\n          <label htmlFor=\"additional_notes\">Additional Notes:</label>\n            <textarea value={this.state.additional_notes} id=\"additional_notes\" className=\"additional_notes\" rows=\"4\" cols=\"50\" onChange={(e) => this.setState({additional_notes: e.target.value})}/>\n        </fieldset>\n        <Mailto \n            email={this.state.manager_email}\n            headers={{\n                subject: `${this.state.association} - Items Needed`,\n                body: this.renderManagerEmailBody()\n            }}>\n                Email Manager\n            </Mailto>\n        <Mailto \n            email={this.state.employee_email}\n            headers={{\n                subject: `${this.state.association} - Status Update`,\n                body: this.renderAnalystEmailBody()\n            }}>\n                Email Analyst\n            </Mailto>\n        <button className=\"update\" type='submit'>\n            UPDATE\n          </button>  \n        <button className=\"delete\" onClick={this.handleDelete}>\n          DELETE\n        </button>\n      </form> :\n      <h4>\n          This study has been {this.state.updatedType}. Please refresh the page to see the changes. \n      </h4>\n      }\n      </div>\n    )\n  }\n}\n\nexport default ReserveItemPage","/Users/lisahenn/projects/helsing-client/src/routes/ItemsNeeded/ItemsNeeded.js",["146","147","148"],"import React, { Component } from 'react'\nimport ReserveItem from '../../components/ReserveItem'\nimport ReserveNav from '../../components/ReserveNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './ItemsNeeded.css'\n\n\nclass ItemsNeeded extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const ItemsNeededList = this.context.studies.filter(study => {\n        study.csa === false ||\n        study.scope === false ||\n        study.retainer === false ||\n        study.ccrs === false ||\n        study.questionnaire === false ||\n        study.budget === false ||\n        study.site_plan === false ||\n        study.reserve_study === false ||\n        study.annual_review === false ||\n        study.income_statement === false ||\n        study.balance_sheet === false\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredItemsNeededList = ItemsNeededList.filter(study => {\n          study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)\n        })\n        this.setState({\n          studies: FilteredItemsNeededList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: ItemsNeededList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='ItemsNeeded'>\n        <ReserveNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <ReserveItem key={study.rs_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default ItemsNeeded","/Users/lisahenn/projects/helsing-client/src/components/SearchBar/SearchBar.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/Completed/Completed.js",["149","150","151"],"import React, { Component } from 'react'\nimport ReserveItem from '../../components/ReserveItem'\nimport ReserveNav from '../../components/ReserveNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './Completed.css'\n\n\nclass Completed extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const CompletedList = this.context.studies.filter(study => {\n        study.draft_billed_date !== null &&\n        study.final_billed_date !== null\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredCompletedList = CompletedList.filter(study => {\n          study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)\n        })\n        this.setState({\n          studies: FilteredCompletedList\n        })\n      }\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: CompletedList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Completed'>\n        <ReserveNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <ReserveItem key={study.rs_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default Completed","/Users/lisahenn/projects/helsing-client/src/routes/AddReserveStudy/AddReserveStudy.js",["152","153"],"import React, { Component } from 'react'\nimport HelsingAPIService from '../../services/HelsingAPIService'\nimport ReserveNav from '../../components/ReserveNav'\nimport './AddReserveStudy.css'\n\nclass AddReserveStudy extends Component {\n\n  static defaultProps = {\n    match: { params: {} },\n  }\n\n  state = {\n    association: null,\n    manager_firstname: null,\n    manager_email: null,\n    assigned_to: null,\n    fy_end: null,\n    client_number: null,\n    total_price: null,\n    csa: false,\n    scope: false,\n    retainer: false,\n    ccrs: false,\n    hoa_questionnaire: false,\n    budget: false,\n    site_plan: false,\n    reserve_study: false,\n    annual_review: false,\n    income_statement: false,\n    balance_sheet: false,\n    additional_notes: null,\n    e_id: null,\n    employees: [],\n    submitted: false\n  }\n\n  componentDidMount() {\n    HelsingAPIService.getAllEmployees()\n        .then(employees => {\n            this.setState({\n                employees\n            })\n      })\n}\n\n  handleSubmit = () => {\n    ev.preventDefault()\n    const { association, manager_firstname, manager_email, assigned_to, fy_end, client_number, total_price, csa, scope, retainer, ccrs, hoa_questionnaire, budget, site_plan, reserve_study, annual_review, income_statement, balance_sheet, additional_notes } = this.state\n    const newRSInfo = { association, manager_firstname, manager_email, assigned_to, fy_end, client_number, total_price, csa, scope, retainer, ccrs, hoa_questionnaire, budget, site_plan, reserve_study, annual_review, income_statement, balance_sheet, additional_notes }\n    newRSInfo.date_added = new Date()\n    HelsingAPIService.addReserveStudy(newRSInfo)\n    this.setState({submitted: true})\n  }\n\n  componentWillUnmount() {\n      this.setState({\n        association: null,\n        manager_firstname: null,\n        manager_email: null,\n        assigned_to: null,\n        fy_end: null,\n        client_number: null,\n        total_price: null,\n        csa: false,\n        scope: false,\n        retainer: false,\n        ccrs: false,\n        hoa_questionnaire: false,\n        budget: false,\n        site_plan: false,\n        reserve_study: false,\n        annual_review: false,\n        income_statement: false,\n        balance_sheet: false,\n        additional_notes: null,\n        e_id: null,\n        employees: [],\n        submitted: false\n    })\n  }\n\n  render() {\n    return (\n        <div>\n        <ReserveNav/>\n        {(!this.state.submitted) ?  \n        <form className='reserve-study' onSubmit={this.handleSubmit}>\n        <fieldset>\n          <legend>Reserve Study Info</legend>\n          <label htmlFor='association_name'>\n                Association Name\n              </label>\n           <input\n                className='association_name'\n                value={this.state.association}\n                onChange={(e) => {this.setState({association: e.target.value})}}\n                type='text'\n                id='association_name'/>\n            <label htmlFor='client_number'>\n                Client #\n              </label>\n           <input\n                className='client_number'\n                value={this.state.client_number}\n                onChange={(e) => {this.setState({client_number: e.target.value})}}\n                type='text'\n                id='client_number'/>\n            <label htmlFor='client_number'>\n                FY End\n              </label>\n           <input\n                className='fy_end'\n                value={this.state.fy_end}\n                onChange={(e) => {this.setState({fy_end: e.target.value})}}\n                type='text'\n                id='fy_end'/>\n            <label htmlFor='total_price'>\n                Total Price\n              </label>\n           <input\n                className='total_price'\n                value={this.state.total_price}\n                onChange={(e) => {this.setState({total_price: e.target.value})}}\n                type='text'\n                id='total_price'/>\n           <label htmlFor='manager_firstname'>\n                Manager First Name\n              </label>\n           <input\n                className='manager_firstname'\n                value={this.state.manager_firstname}\n                onChange={(e) => {this.setState({manager_firstname: e.target.value})}}\n                type='text'\n                id='manager_firstname'/>\n          <label htmlFor='manager_email'>\n                Manager Email\n              </label>\n           <input\n                className='manager_email'\n                value={this.state.manager_email}\n                onChange={(e) => {this.setState({manager_email: e.target.value})}}\n                type='text'\n                id='manager_email'/>\n          <label htmlFor=\"assigned_to\">Assigned to:</label>\n          <select defaultValue={this.state.e_id} className=\"assigned_to\" id=\"assigned_to\" onChange={(e) => this.setState({e_id: e.target.value})}>\n              {this.state.employees.map(employee => {\n                  return (\n                      <option value={employee.e_id}>{employee.employee_firstname}</option>\n                  )\n              })}\n          </select>\n          <label htmlFor=\"csa\">CSA</label>\n          <select defaultValue={this.state.csa} className=\"csa\" id=\"csa\" onChange={(e) => this.setState({csa: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"scope\">Scope</label>\n          <select defaultValue={this.state.scope} className=\"scope\" id=\"scope\" onChange={(e) => this.setState({scope: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"retainer\">Retainer</label>\n          <select defaultValue={this.state.retainer} className=\"retainer\" id=\"retainer\" onChange={(e) => this.setState({retainer: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"ccrs\">{'CC&Rs'}</label>\n          <select defaultValue={this.state.ccrs} className=\"ccrs\" id=\"ccrs\" onChange={(e) => this.setState({ccrs: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"hoa_questionnaire\">HOA Questionnaire</label>\n          <select defaultValue={this.state.hoa_questionnaire} className=\"hoa_questionnaire\" id=\"hoa_questionnaire\" onChange={(e) => this.setState({hoa_questionnaire: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"budget\">Budget</label>\n          <select defaultValue={this.state.budget} className=\"budget\" id=\"budget\" onChange={(e) => this.setState({budget: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"site_plan\">Site Plan</label>\n          <select defaultValue={this.state.site_plan} className=\"site_plan\" id=\"site_plan\" onChange={(e) => this.setState({site_plan: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"reserve_study\">Previous Reserve Studies</label>\n          <select defaultValue={this.state.reserve_study} className=\"reserve_study\" id=\"reserve_study\" onChange={(e) => this.setState({reserve_study: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"annual_review\">Annual Review</label>\n          <select defaultValue={this.state.annual_review} className=\"annual_review\" id=\"annual_review\" onChange={(e) => this.setState({annual_review: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"income_statement\">Income Statement</label>\n          <select defaultValue={this.state.income_statement} className=\"income_statement\" id=\"income_statement\" onChange={(e) => this.setState({income_statement: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"balance_sheet\">Balance Sheet</label>\n          <select defaultValue={this.state.balance_sheet} className=\"balance_sheet\" id=\"balance_sheet\" onChange={(e) => this.setState({balance_sheet: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"additional_notes\">Additional Notes:</label>\n            <textarea value={this.state.additional_notes} id=\"additional_notes\" className=\"additional_notes\" rows=\"4\" cols=\"50\" onChange={(e) => this.setState({additional_notes: e.target.value})}/>\n        </fieldset>\n        <button className=\"submit\" type='submit'>\n            SUBMIT\n          </button>    \n      </form> :\n      <h4>\n          This study has been submitted. Please <Link to={'/'}>click here</Link> to go to the homepage. \n      </h4>\n      }\n      </div>\n    )\n  }\n}\n\nexport default AddReserveStudy","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentItemPage/SustainmentItemPage.js",["154"],"import React, { Component } from 'react'\nimport HelsingAPIService from '../../services/HelsingAPIService'\nimport SustainmentNav from '../../components/SustainmentNav'\nimport Mailto from 'reactv16-mailto'\nimport './SustainmentItemPage.css'\n\nclass SustainmentItemPage extends Component {\n\n  static defaultProps = {\n    match: { params: {} },\n  }\n\n  state = {\n    s_id: null,\n    association: null,\n    manager_firstname: null,\n    manager_email: null,\n    date_added: null,\n    fy_end: null,\n    client_number: null,\n    assigned_to: null,\n    total_price: null,\n    s_contract: null,\n    retainer: null,\n    worksheets_yr1: null,\n    worksheets_yr2: null,\n    worksheets_yr3: null,\n    yr1_billed: null,\n    yr1_billed_date: null,\n    yr2_billed: null,\n    yr2_billed_date: null,\n    yr3_billed: null,\n    sustainment_letter: null,\n    additional_notes: null,\n    e_id: null,\n    employee_firstname: null,\n    employee_lastname: null,\n    employee_email: null,\n    employees: [],\n    updated: false,\n    updatedType: null\n  }\n\n  componentDidMount() {\n    const { sustainmentId } = this.props.match.params\n    HelsingAPIService.getSustainmentById(sustainmentId)\n      .then(study => {\n        this.setState({\n          ...study\n        })\n        HelsingAPIService.getEmployeeById(study.assigned_to)\n        .then(employee => {\n          this.setState({\n          ...employee\n      })\n    })\n    HelsingAPIService.getAllEmployees()\n        .then(employees => {\n            this.setState({\n                employees\n            })\n        })\n  })\n}\n\n  renderManagerEmailBody() {\n    const { worksheets_yr1, yr1_billed, worksheets_yr2, yr2_billed, worksheets_yr3, yr3_billed, association, manager_firstname } = this.state\n    if(!worksheets_yr1 && !yr1_billed) {\n        const body = `\n            Hi ${manager_firstname},\n\n            This email is in regards to ${association}. We have not yet received the completed Yr. 1 funding update worksheets. Please let me know if you need them to be resent. \n        `\n        return body\n    }\n    else if (yr1_billed && !yr2_billed && !worksheets_yr2 && !yr3_billed) {\n        const body = `\n            Hi ${manager_firstname},\n\n            This email is in regards to ${association}. We have not yet received the completed Yr. 2 funding update worksheets. Please let me know if you need them to be resent. \n        `\n        return body\n    }\n    else if (yr1_billed && yr2_billed && !yr3_billed && !worksheets_yr3) {\n        const body = `\n            Hi ${manager_firstname},\n\n            This email is in regards to ${association}. We have not yet received the completed Yr. 3 reserve study worksheets. Please let me know if you need them to be resent. \n        `\n        return body\n    }\n    else {\n        return null\n    }\n  }\n\n  renderAnalystEmailBody() {\n    if(!this.state.yr1_billed && !this.state.yr2_billed && !this.state.yr3_billed) {\n        const body = `\n            Hi ${this.state.employee_firstname},\n\n            Do you have a status update for ${this.state.association}? Are we ready to proceed with billing yr. 1?\n        `\n        return body\n    }\n    else if (this.state.yr1_billed && !this.state.yr2_billed && !this.state.yr3_billed) {\n        const body = `\n            Hi ${this.state.employee_firstname},\n\n            Do you have a status update for ${this.state.association}? Are we ready to proceed with billing yr. 2?\n        `\n        return body\n    }\n    else if (this.state.yr1_billed && this.state.yr2_billed && !this.state.yr3_billed) {\n        const body = `\n            Hi ${this.state.employee_firstname},\n\n            Do you have a status update for ${this.state.association}? Are we ready to proceed with billing yr. 3?\n        `\n        return body\n    }\n    else if (this.state.yr1_billed && this.state.yr2_billed && this.state.yr3_billed && !this.state.sustainment_letter) {\n        const body = `\n            Hi ${this.state.employee_firstname},\n\n            I see that we've billed the third year reserve study for ${this.state.association}. Have you sent the manager a sustainment renewal letter?\n        `\n        return body\n    }\n    else {\n        return null\n    }\n  }\n\n  handleUpdate = () => {\n    ev.preventDefault()\n    const { s_id, association, manager_firstname, manager_email, fy_end, client_number, assigned_to, total_price, s_contract, retainer, worksheets_yr1, worksheets_yr2, worksheets_yr3, yr1_billed, yr2_billed, yr3_billed, sustainment_letter, additional_notes } = this.state\n    const updatedInfo = { association, manager_firstname, manager_email, fy_end, client_number, assigned_to, total_price, s_contract, retainer, worksheets_yr1, worksheets_yr2, worksheets_yr3, yr1_billed, yr2_billed, yr3_billed, sustainment_letter, additional_notes }\n    HelsingAPIService.updateSustainment(s_id, updatedInfo)\n    this.setState({\n      updated: true,\n      updatedType: 'update'\n    })\n  }\n\n  handleDelete = () => {\n    const { s_id } = this.state\n    HelsingAPIService.deleteSustainment(s_id)\n    this.setState({\n      updated: true,\n      updatedType: 'delete'\n    })\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      updated: false,\n      updatedType: null\n    })\n  }\n\n  render() {\n    return (\n        <div>\n        <SustainmentNav/>\n        {(!this.state.updated) ?  \n        <form className='sustainment' onSubmit={this.handleUpdate}>\n        <fieldset>\n          <legend>Sustainment Info</legend>\n          <p>Added to job tracker on {this.state.date_added}</p>\n          {this.state.yr1_billed && \n            <p>Yr. 1 billed on {this.state.yr1_billed_date}</p>}\n          {this.state.yr2_billed && \n            <p>Yr. 2 billed on {this.state.yr2_billed_date}</p>}\n          {this.state.yr3_billed && \n            <p>Yr. 3 billed on {this.state.yr3_billed_date}</p>}\n          <label htmlFor='association_name'>\n                Association Name\n              </label>\n           <input\n                className='association_name'\n                value={this.state.association}\n                onChange={(e) => {this.setState({association: e.target.value})}}\n                type='text'\n                id='association_name'/>\n            <label htmlFor='client_number'>\n                Client #\n              </label>\n           <input\n                className='client_number'\n                value={this.state.client_number}\n                onChange={(e) => {this.setState({client_number: e.target.value})}}\n                type='text'\n                id='client_number'/>\n            <label htmlFor='client_number'>\n                FY End\n              </label>\n           <input\n                className='fy_end'\n                value={this.state.fy_end}\n                onChange={(e) => {this.setState({fy_end: e.target.value})}}\n                type='text'\n                id='fy_end'/>\n            <label htmlFor='total_price'>\n                Total Price\n              </label>\n           <input\n                className='total_price'\n                value={this.state.total_price}\n                onChange={(e) => {this.setState({total_price: e.target.value})}}\n                type='text'\n                id='total_price'/>\n           <label htmlFor='manager_firstname'>\n                Manager First Name\n              </label>\n           <input\n                className='manager_firstname'\n                value={this.state.manager_firstname}\n                onChange={(e) => {this.setState({manager_firstname: e.target.value})}}\n                type='text'\n                id='manager_firstname'/>\n          <label htmlFor='manager_email'>\n                Manager Email\n              </label>\n           <input\n                className='manager_email'\n                value={this.state.manager_email}\n                onChange={(e) => {this.setState({manager_email: e.target.value})}}\n                type='text'\n                id='manager_email'/>\n          <label htmlFor=\"assigned_to\">Assigned to:</label>\n          <select defaultValue={this.state.e_id} className=\"assigned_to\" id=\"assigned_to\" onChange={(e) => this.setState({e_id: e.target.value})}>\n              {this.state.employees.map(employee => {\n                  return (\n                      <option value={employee.e_id}>{employee.employee_firstname}</option>\n                  )\n              })}\n          </select>\n          <label htmlFor=\"contract\">Contract</label>\n          <select defaultValue={this.state.s_contract} className=\"contract\" id=\"contract\" onChange={(e) => this.setState({s_contract: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"retainer\">Retainer</label>\n          <select defaultValue={this.state.retainer} className=\"retainer\" id=\"retainer\" onChange={(e) => this.setState({retainer: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"yr1_worksheets\">Yr. 1 Worksheets</label>\n          <select defaultValue={this.state.yr1_worksheets} className=\"yr1_worksheets\" id=\"yr1_worksheets\" onChange={(e) => this.setState({yr1_worksheets: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"yr1_billed\">Yr. 1 Billed?</label>\n          <select defaultValue={this.state.yr1_billed} className=\"yr1_billed\" id=\"yr1_billed\" onChange={(e) => this.setState({yr1_billed: e.target.value})}>\n                <option value={true}>True</option>\n                <option value={false}>False</option>\n          </select>\n          <label htmlFor=\"yr2_worksheets\">Yr. 2 Worksheets</label>\n          <select defaultValue={this.state.yr2_worksheets} className=\"yr2_worksheets\" id=\"yr2_worksheets\" onChange={(e) => this.setState({yr2_worksheets: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"yr2_billed\">Yr. 2 Billed?</label>\n          <select defaultValue={this.state.yr2_billed} className=\"yr2_billed\" id=\"yr2_billed\" onChange={(e) => this.setState({yr2_billed: e.target.value})}>\n                <option value={true}>True</option>\n                <option value={false}>False</option>\n          </select>\n          <label htmlFor=\"yr3_worksheets\">Yr. 3 Worksheets</label>\n          <select defaultValue={this.state.yr3_worksheets} className=\"yr3_worksheets\" id=\"yr3_worksheets\" onChange={(e) => this.setState({yr3_worksheets: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"yr3_billed\">Yr. 3 Billed?</label>\n          <select defaultValue={this.state.yr3_billed} className=\"yr3_billed\" id=\"yr3_billed\" onChange={(e) => this.setState({yr3_billed: e.target.value})}>\n                <option value={true}>True</option>\n                <option value={false}>False</option>\n          </select>\n          <label htmlFor=\"sustainment_letter\">Sustainment Letter Sent?</label>\n          <select defaultValue={this.state.sustainment_letter} className=\"sustainment_letter\" id=\"sustainment_letter\" onChange={(e) => this.setState({sustainment_letter: e.target.value})}>\n                <option value={true}>True</option>\n                <option value={false}>False</option>\n          </select>\n          <label htmlFor=\"additional_notes\">Additional Notes:</label>\n            <textarea value={this.state.additional_notes} id=\"additional_notes\" className=\"additional_notes\" rows=\"4\" cols=\"50\" onChange={(e) => this.setState({additional_notes: e.target.value})}/>\n        </fieldset>\n        <Mailto \n            email={this.state.manager_email}\n            headers={{\n                subject: `${this.state.association} - Items Needed`,\n                body: this.renderManagerEmailBody()\n            }}>\n                Email Manager\n            </Mailto>\n        <Mailto \n            email={this.state.employee_email}\n            headers={{\n                subject: `${this.state.association} - Status Update`,\n                body: this.renderAnalystEmailBody()\n            }}>\n                Email Analyst\n            </Mailto>\n        <button className=\"update\" type='submit'>\n            UPDATE\n          </button>\n        <button className=\"delete\" onClick={this.handleDelete}>\n          DELETE\n        </button>    \n      </form> :\n      <h4>\n          This study has been {this.state.updatedType}. Please refresh the page to see the changes. \n      </h4>\n      }\n      </div>\n    )\n  }\n}\n\nexport default SustainmentItemPage","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearOne/SustainmentYearOne.js",["155","156","157"],"import React, { Component } from 'react'\nimport SustainmentItem from '../../components/SustainmentItem'\nimport SustainmentNav from '../../components/SustainmentNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './SustainmentYearOne.css'\n\n\nclass SustainmentYearOne extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const YearOneList = this.context.sustainment.filter(study => {\n        study.yr1_billed === null\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredYearOneList = YearOneList.filter(study => {\n          study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)\n        })\n        this.setState({\n          studies: FilteredYearOneList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: YearOneList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='YearOne'>\n        <SustainmentNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <SustainmentItem key={study.s_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default SustainmentYearOne","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentCompleted/SustainmentCompleted.js",["158","159","160","161"],"import React, { Component } from 'react'\nimport SustainmentItem from '../../components/SustainmentItem'\nimport SustainmentNav from '../../components/SustainmentNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './SustainmentCompleted.css'\n\n\nclass SustainmentCompleted extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const CompletedList = this.context.sustainment.filter(study => {\n        study.yr1_billed !== null &&\n        study.yr2_billed !== null &&\n        study.yr3_billed !== null\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredCompletedList = CompeletedList.filter(study => {\n          study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)\n        })\n        this.setState({\n          studies: FilteredCompletedList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: CompletedList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Completed'>\n        <SustainmentNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <SustainmentItem key={study.s_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default SustainmentCompleted","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearThree/SustainmentYearThree.js",["162","163","164"],"import React, { Component } from 'react'\nimport SustainmentItem from '../../components/SustainmentItem'\nimport SustainmentNav from '../../components/SustainmentNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './SustainmentYearThree.css'\n\n\nclass SustainmentYearThree extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const YearThreeList = this.context.sustainment.filter(study => {\n        study.yr1_billed !== null &&\n        study.yr2_billed !== null &&\n        study.yr3_billed === null\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredYearThreeList = YearThreeList.filter(study => {\n          study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)\n        })\n        this.setState({\n          studies: FilteredYearThreeList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: YearThreeList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='YearThree'>\n        <SustainmentNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <SustainmentItem key={study.s_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default SustainmentYearThree","/Users/lisahenn/projects/helsing-client/src/routes/DraftBilled/DraftBilled.js",["165","166","167"],"import React, { Component } from 'react'\nimport ReserveItem from '../../components/ReserveItem'\nimport ReserveNav from '../../components/ReserveNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './DraftBilled.css'\n\n\nclass DraftBilled extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const DraftBilledList = this.context.studies.filter(study => {\n        study.draft_billed_date !== null &&\n        study.final_billed_date === null\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredDraftBilledList = DraftBilledList.filter(study => {\n          study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)\n        })\n        this.setState({\n          studies: FilteredDraftBilledList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: DraftBilledList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='DraftBilled'>\n        <ReserveNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <ReserveItem key={study.rs_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default DraftBilled","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearTwo/SustainmentYearTwo.js",["168","169","170"],"import React, { Component } from 'react'\nimport SustainmentItem from '../../components/SustainmentItem'\nimport SustainmentNav from '../../components/SustainmentNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './SustainmentYearTwo.css'\n\n\nclass SustainmentYearTwo extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const YearTwoList = this.context.sustainment.filter(study => {\n        study.yr1_billed !== null &&\n        study.yr2_billed === null &&\n        study.yr3_billed === null\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredYearTwoList = YearTwoList.filter(study => {\n          study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)\n        })\n        this.setState({\n          studies: FilteredYearTwoList\n        })\n      }\n\n      if (!this.context.searchQuery.length) {\n      this.setState({ \n          studies: YearTwoList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='YearTwo'>\n        <SustainmentNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <SustainmentItem key={study.s_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default SustainmentYearTwo","/Users/lisahenn/projects/helsing-client/src/routes/TMItemPage/TMItemPage.js",["171","172","173"],"import React, { Component } from 'react'\nimport HelsingAPIService from '../../services/HelsingAPIService'\nimport TMNav from '../../components/TMNav'\nimport Mailto from 'reactv16-mailto'\nimport './TMItemPage.css'\n\nclass TMItemPage extends Component {\n\n  static defaultProps = {\n    match: { params: {} },\n  }\n\n  state = {\n    tm_id: null,\n    association: null,\n    manager_firstname: null,\n    manager_email: null,\n    date_added: null,\n    fy_end: null,\n    client_number: null,\n    assigned_to: null,\n    total_price: null,\n    tm_contract: null,\n    worksheets: null,\n    billed: null,\n    billed_date: null,\n    additional_notes: null,\n    e_id: null,\n    employee_firstname: null,\n    employee_lastname: null,\n    employee_email: null,\n    employees: [],\n    updated: false,\n    updatedType: null\n  }\n\n  componentDidMount() {\n    const { tmId } = this.props.match.params\n    HelsingAPIService.getTMById(tmId)\n      .then(study => {\n        this.setState({\n          ...study\n        })\n        HelsingAPIService.getEmployeeById(study.assigned_to)\n        .then(employee => {\n          this.setState({\n          ...employee\n      })\n    })\n    HelsingAPIService.getAllEmployees()\n        .then(employees => {\n            this.setState({\n                employees\n            })\n        })\n  })\n}\n\n  renderManagerEmailBody() {\n    const { worksheets } = this.state\n    if(!worksheets) {\n        const body = `\n            Hi ${manager_firstname},\n\n            This email is in regards to ${association}. We have not yet received the completed funding update worksheets. Please let me know if you need them to be resent. \n        `\n        return body\n    }\n    else {\n        return null\n    }\n  }\n\n  renderAnalystEmailBody() {\n    if(!this.state.billed) {\n        const body = `\n            Hi ${this.state.employee_firstname},\n\n            Do you have a status update for ${this.state.association}? Are we ready to bill?\n        `\n        return body\n    }\n    else {\n        return null\n    }\n  }\n\n  handleUpdate = () => {\n    ev.preventDefault()\n    const { tm_id, association, manager_firstname, manager_email, fy_end, client_number, assigned_to, total_price, tm_contract, worksheets, billed, additional_notes } = this.state\n    const updatedInfo = { association, manager_firstname, manager_email, fy_end, client_number, assigned_to, total_price, tm_contract, worksheets, billed, additional_notes }\n    HelsingAPIService.updateTM(tm_id, updatedInfo)\n    this.setState({\n      updated: true,\n      updatedType: 'update'\n    })\n  }\n\n  handleDelete = () => {\n    const { tm_id } = this.state\n    HelsingAPIService.deleteTM(tm_id)\n    this.setState({\n      updated: true,\n      updatedType: 'delete'\n    })\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      updated: false,\n      updatedType: null\n    })\n  }\n\n  render() {\n    return (\n        <div>\n        <TMNav/>\n        {(!this.state.updated) ?  \n        <form className='time-and-material' onSubmit={this.handleUpdate}>\n        <fieldset>\n          <legend>{'T&M'} Info</legend>\n          <p>Added to job tracker on {this.state.date_added}</p>\n          {this.state.billed && \n            <p>Billed on {this.state.billed_date}</p>}\n          <label htmlFor='association_name'>\n                Association Name\n              </label>\n           <input\n                className='association_name'\n                value={this.state.association}\n                onChange={(e) => {this.setState({association: e.target.value})}}\n                type='text'\n                id='association_name'/>\n            <label htmlFor='client_number'>\n                Client #\n              </label>\n           <input\n                className='client_number'\n                value={this.state.client_number}\n                onChange={(e) => {this.setState({client_number: e.target.value})}}\n                type='text'\n                id='client_number'/>\n            <label htmlFor='client_number'>\n                FY End\n              </label>\n           <input\n                className='fy_end'\n                value={this.state.fy_end}\n                onChange={(e) => {this.setState({fy_end: e.target.value})}}\n                type='text'\n                id='fy_end'/>\n            <label htmlFor='total_price'>\n                Total Price\n              </label>\n           <input\n                className='total_price'\n                value={this.state.total_price}\n                onChange={(e) => {this.setState({total_price: e.target.value})}}\n                type='text'\n                id='total_price'/>\n           <label htmlFor='manager_firstname'>\n                Manager First Name\n              </label>\n           <input\n                className='manager_firstname'\n                value={this.state.manager_firstname}\n                onChange={(e) => {this.setState({manager_firstname: e.target.value})}}\n                type='text'\n                id='manager_firstname'/>\n          <label htmlFor='manager_email'>\n                Manager Email\n              </label>\n           <input\n                className='manager_email'\n                value={this.state.manager_email}\n                onChange={(e) => {this.setState({manager_email: e.target.value})}}\n                type='text'\n                id='manager_email'/>\n          <label htmlFor=\"assigned_to\">Assigned to:</label>\n          <select defaultValue={this.state.e_id} className=\"assigned_to\" id=\"assigned_to\" onChange={(e) => this.setState({e_id: e.target.value})}>\n              {this.state.employees.map(employee => {\n                  return (\n                      <option value={employee.e_id}>{employee.employee_firstname}</option>\n                  )\n              })}\n          </select>\n          <label htmlFor=\"contract\">Contract</label>\n          <select defaultValue={this.state.tm_contract} className=\"contract\" id=\"contract\" onChange={(e) => this.setState({tm_contract: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"worksheets\">Worksheets</label>\n          <select defaultValue={this.state.worksheets} className=\"worksheets\" id=\"worksheets\" onChange={(e) => this.setState({worksheets: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"billed\">Billed?</label>\n          <select defaultValue={this.state.billed} className=\"billed\" id=\"billed\" onChange={(e) => this.setState({billed: e.target.value})}>\n                <option value={true}>True</option>\n                <option value={false}>False</option>\n          </select>\n          <label htmlFor=\"additional_notes\">Additional Notes:</label>\n            <textarea value={this.state.additional_notes} id=\"additional_notes\" className=\"additional_notes\" rows=\"4\" cols=\"50\" onChange={(e) => this.setState({additional_notes: e.target.value})}/>\n        </fieldset>\n        <Mailto \n            email={this.state.manager_email}\n            headers={{\n                subject: `${this.state.association} - Items Needed`,\n                body: this.renderManagerEmailBody()\n            }}>\n                Email Manager\n            </Mailto>\n        <Mailto \n            email={this.state.employee_email}\n            headers={{\n                subject: `${this.state.association} - Status Update`,\n                body: this.renderAnalystEmailBody()\n            }}>\n                Email Analyst\n            </Mailto>\n        <button className=\"update\" type='submit'>\n            UPDATE\n          </button>\n        <button className=\"delete\" onClick={this.handleDelete}>\n          DELETE\n        </button>    \n      </form> :\n      <h4>\n          This study has been {this.state.updatedType}. Please refresh the page to see the changes. \n      </h4>\n      }\n      </div>\n    )\n  }\n}\n\nexport default TMItemPage","/Users/lisahenn/projects/helsing-client/src/routes/AddTM/AddTM.js",["174","175"],"import React, { Component } from 'react'\nimport HelsingAPIService from '../../services/HelsingAPIService'\nimport TMNav from '../../components/TMNav'\nimport './AddTM.css'\n\nclass AddTM extends Component {\n\n  static defaultProps = {\n    match: { params: {} },\n  }\n\n  state = {\n    association: null,\n    manager_firstname: null,\n    manager_email: null,\n    fy_end: null,\n    client_number: null,\n    assigned_to: null,\n    total_price: null,\n    tm_contract: false,\n    worksheets: false,\n    additional_notes: null,\n    e_id: null,\n    employees: [],\n    submitted: false\n  }\n\n  componentDidMount() {\n    HelsingAPIService.getAllEmployees()\n        .then(employees => {\n            this.setState({\n                employees\n            })\n        })\n}\n\n  handleSubmit = () => {\n    ev.preventDefault()\n    const { association, manager_firstname, manager_email, fy_end, client_number, assigned_to, total_price, tm_contract, worksheets, additional_notes } = this.state\n    const newTMInfo = { association, manager_firstname, manager_email, fy_end, client_number, assigned_to, total_price, tm_contract, worksheets, additional_notes }\n    HelsingAPIService.addTM(newTMInfo)\n    this.setState({submitted: true})\n  }\n\n  componentWillUnmount() {\n      this.setState({submitted: false})\n  }\n\n  render() {\n    return (\n        <div>\n        <TMNav/>\n        {(!this.state.submitted) ?  \n        <form className='time-and-material' onSubmit={this.handleSubmit}>\n        <fieldset>\n          <legend>{'T&M'} Info</legend>\n          <label htmlFor='association_name'>\n                Association Name\n              </label>\n           <input\n                className='association_name'\n                value={this.state.association}\n                onChange={(e) => {this.setState({association: e.target.value})}}\n                type='text'\n                id='association_name'/>\n            <label htmlFor='client_number'>\n                Client #\n              </label>\n           <input\n                className='client_number'\n                value={this.state.client_number}\n                onChange={(e) => {this.setState({client_number: e.target.value})}}\n                type='text'\n                id='client_number'/>\n            <label htmlFor='client_number'>\n                FY End\n              </label>\n           <input\n                className='fy_end'\n                value={this.state.fy_end}\n                onChange={(e) => {this.setState({fy_end: e.target.value})}}\n                type='text'\n                id='fy_end'/>\n            <label htmlFor='total_price'>\n                Total Price\n              </label>\n           <input\n                className='total_price'\n                value={this.state.total_price}\n                onChange={(e) => {this.setState({total_price: e.target.value})}}\n                type='text'\n                id='total_price'/>\n           <label htmlFor='manager_firstname'>\n                Manager First Name\n              </label>\n           <input\n                className='manager_firstname'\n                value={this.state.manager_firstname}\n                onChange={(e) => {this.setState({manager_firstname: e.target.value})}}\n                type='text'\n                id='manager_firstname'/>\n          <label htmlFor='manager_email'>\n                Manager Email\n              </label>\n           <input\n                className='manager_email'\n                value={this.state.manager_email}\n                onChange={(e) => {this.setState({manager_email: e.target.value})}}\n                type='text'\n                id='manager_email'/>\n          <label htmlFor=\"assigned_to\">Assigned to:</label>\n          <select defaultValue={this.state.e_id} className=\"assigned_to\" id=\"assigned_to\" onChange={(e) => this.setState({e_id: e.target.value})}>\n              {this.state.employees.map(employee => {\n                  return (\n                      <option value={employee.e_id}>{employee.employee_firstname}</option>\n                  )\n              })}\n          </select>\n          <label htmlFor=\"contract\">Contract</label>\n          <select defaultValue={this.state.tm_contract} className=\"contract\" id=\"contract\" onChange={(e) => this.setState({tm_contract: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"worksheets\">Worksheets</label>\n          <select defaultValue={this.state.worksheets} className=\"worksheets\" id=\"worksheets\" onChange={(e) => this.setState({worksheets: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"additional_notes\">Additional Notes:</label>\n            <textarea value={this.state.additional_notes} id=\"additional_notes\" className=\"additional_notes\" rows=\"4\" cols=\"50\" onChange={(e) => this.setState({additional_notes: e.target.value})}/>\n        </fieldset>\n        <button className=\"submit\" type='submit'>\n            SUBMIT\n          </button>    \n      </form> :\n      <h4>\n          This study has been submitted. Please <Link to={'/'}>click here</Link> to go to the homepage.\n      </h4>\n      }\n      </div>\n    )\n  }\n}\n\nexport default AddTM","/Users/lisahenn/projects/helsing-client/src/routes/TMQueue/TMQueue.js",["176","177","178"],"import React, { Component } from 'react'\nimport TMItem from '../../components/TMItem'\nimport TMNav from '../../components/TMNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './TMQueue.css'\n\n\nclass TMQueue extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const QueueList = this.context.timeAndMaterial.filter(study => {\n        study.billed_date === null\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredQueueList = QueueList.filter(study => {\n          study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)\n        })\n        this.setState({\n          studies: FilteredQueueList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: QueueList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Queue'>\n        <TMNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <TMItem key={study.tm_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default TMQueue","/Users/lisahenn/projects/helsing-client/src/routes/TMCompleted/TMCompleted.js",["179","180","181"],"import React, { Component } from 'react'\nimport TMItem from '../../components/TMItem'\nimport TMNav from '../../components/TMNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './TMCompleted.css'\n\n\nclass TMCompleted extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const CompletedList = this.context.timeAndMaterial.filter(study => {\n        study.billed_date !== null\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredCompletedList = CompletedList.filter(study => {\n          study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)\n        })\n        this.setState({\n          studies: FilteredCompletedList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: CompletedList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Completed'>\n        <TMNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <TMItem key={study.tm_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default TMCompleted","/Users/lisahenn/projects/helsing-client/src/routes/AddEmployee/AddEmployee.js",["182","183"],"/Users/lisahenn/projects/helsing-client/src/routes/AddSustainment/AddSustainment.js",["184","185"],"import React, { Component } from 'react'\nimport HelsingAPIService from '../../services/HelsingAPIService'\nimport SustainmentNav from '../../components/SustainmentNav'\nimport './AddSustainment.css'\n\nclass AddSustainment extends Component {\n\n  static defaultProps = {\n    match: { params: {} },\n  }\n\n  state = {\n    association: null,\n    manager_firstname: null,\n    manager_email: null,\n    fy_end: null,\n    client_number: null,\n    assigned_to: null,\n    total_price: null,\n    s_contract: false,\n    retainer: false,\n    additional_notes: null,\n    e_id: null,\n    employees: [],\n    submitted: false\n  }\n\n  componentDidMount() {\n    HelsingAPIService.getAllEmployees()\n        .then(employees => {\n            this.setState({\n                employees\n            })\n        })\n}\n\n  handleSubmit = () => {\n    ev.preventDefault()\n    const { association, manager_firstname, manager_email, fy_end, client_number, assigned_to, total_price, s_contract, retainer, additional_notes } = this.state\n    const newSustainmentInfo = { association, manager_firstname, manager_email, fy_end, client_number, assigned_to, total_price, s_contract, retainer, additional_notes }\n    HelsingAPIService.addSustainment(newSustainmentInfo)\n    this.setState({submitted: true})\n  }\n\n  componentWillUnmount() {\n      this.setState({\n        association: null,\n        manager_firstname: null,\n        manager_email: null,\n        fy_end: null,\n        client_number: null,\n        assigned_to: null,\n        total_price: null,\n        s_contract: null,\n        retainer: null,\n        additional_notes: null,\n        e_id: null,\n        employees: [],\n        submitted: false\n      })\n  }\n\n  render() {\n    return (\n        <div>\n        <SustainmentNav/>\n        {(!this.state.submitted) ?  \n        <form className='sustainment' onSubmit={this.handleSubmit}>\n        <fieldset>\n          <legend>Sustainment Info</legend>\n          <label htmlFor='association_name'>\n                Association Name\n              </label>\n           <input\n                className='association_name'\n                value={this.state.association}\n                onChange={(e) => {this.setState({association: e.target.value})}}\n                type='text'\n                id='association_name'/>\n            <label htmlFor='client_number'>\n                Client #\n              </label>\n           <input\n                className='client_number'\n                value={this.state.client_number}\n                onChange={(e) => {this.setState({client_number: e.target.value})}}\n                type='text'\n                id='client_number'/>\n            <label htmlFor='client_number'>\n                FY End\n              </label>\n           <input\n                className='fy_end'\n                value={this.state.fy_end}\n                onChange={(e) => {this.setState({fy_end: e.target.value})}}\n                type='text'\n                id='fy_end'/>\n            <label htmlFor='total_price'>\n                Total Price\n              </label>\n           <input\n                className='total_price'\n                value={this.state.total_price}\n                onChange={(e) => {this.setState({total_price: e.target.value})}}\n                type='text'\n                id='total_price'/>\n           <label htmlFor='manager_firstname'>\n                Manager First Name\n              </label>\n           <input\n                className='manager_firstname'\n                value={this.state.manager_firstname}\n                onChange={(e) => {this.setState({manager_firstname: e.target.value})}}\n                type='text'\n                id='manager_firstname'/>\n          <label htmlFor='manager_email'>\n                Manager Email\n              </label>\n           <input\n                className='manager_email'\n                value={this.state.manager_email}\n                onChange={(e) => {this.setState({manager_email: e.target.value})}}\n                type='text'\n                id='manager_email'/>\n          <label htmlFor=\"assigned_to\">Assigned to:</label>\n          <select defaultValue={this.state.e_id} className=\"assigned_to\" id=\"assigned_to\" onChange={(e) => this.setState({e_id: e.target.value})}>\n              {this.state.employees.map(employee => {\n                  return (\n                      <option value={employee.e_id}>{employee.employee_firstname}</option>\n                  )\n              })}\n          </select>\n          <label htmlFor=\"contract\">Contract</label>\n          <select defaultValue={this.state.s_contract} className=\"contract\" id=\"contract\" onChange={(e) => this.setState({s_contract: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"retainer\">Retainer</label>\n          <select defaultValue={this.state.retainer} className=\"retainer\" id=\"retainer\" onChange={(e) => this.setState({retainer: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"additional_notes\">Additional Notes:</label>\n            <textarea value={this.state.additional_notes} id=\"additional_notes\" className=\"additional_notes\" rows=\"4\" cols=\"50\" onChange={(e) => this.setState({additional_notes: e.target.value})}/>\n        </fieldset>\n        <button className=\"submit\" type='submit'>\n            SUBMIT\n          </button>    \n      </form> :\n      <h4>\n          This study has been submitted. Please <Link to={'/'}>click here</Link> to go to the homepage. \n      </h4>\n      }\n      </div>\n    )\n  }\n}\n\nexport default AddSustainment","/Users/lisahenn/projects/helsing-client/src/config.js",["186"],{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":2,"message":"192","line":15,"column":16,"nodeType":"193","messageId":"194","endLine":15,"endColumn":30},{"ruleId":"195","severity":2,"message":"196","line":2,"column":41,"nodeType":"197","messageId":"198","endLine":2,"endColumn":42},{"ruleId":"191","severity":2,"message":"199","line":2,"column":41,"nodeType":"193","messageId":"194","endLine":2,"endColumn":42},{"ruleId":"200","severity":2,"message":"201","line":3,"column":1,"nodeType":"202","endLine":3,"endColumn":23,"fix":"203"},{"ruleId":"204","severity":1,"message":"205","line":19,"column":60,"nodeType":"206","messageId":"207","endLine":19,"endColumn":62},{"ruleId":"195","severity":2,"message":"196","line":20,"column":9,"nodeType":"197","messageId":"198","endLine":33,"endColumn":41},{"ruleId":"204","severity":1,"message":"205","line":37,"column":60,"nodeType":"206","messageId":"207","endLine":37,"endColumn":62},{"ruleId":"204","severity":1,"message":"205","line":19,"column":64,"nodeType":"206","messageId":"207","endLine":19,"endColumn":66},{"ruleId":"195","severity":2,"message":"196","line":20,"column":9,"nodeType":"197","messageId":"198","endLine":31,"endColumn":35},{"ruleId":"204","severity":1,"message":"205","line":35,"column":68,"nodeType":"206","messageId":"207","endLine":35,"endColumn":70},{"ruleId":"195","severity":2,"message":"196","line":88,"column":13,"nodeType":"197","messageId":"198","endLine":88,"endColumn":31},{"ruleId":"208","severity":1,"message":"209","line":88,"column":27,"nodeType":"210","messageId":"211","endLine":88,"endColumn":28},{"ruleId":"212","severity":1,"message":"213","line":95,"column":17,"nodeType":"214","messageId":"215","endLine":95,"endColumn":20},{"ruleId":"191","severity":2,"message":"216","line":138,"column":5,"nodeType":"193","messageId":"194","endLine":138,"endColumn":7},{"ruleId":"204","severity":1,"message":"205","line":19,"column":65,"nodeType":"206","messageId":"207","endLine":19,"endColumn":67},{"ruleId":"195","severity":2,"message":"196","line":20,"column":9,"nodeType":"197","messageId":"198","endLine":30,"endColumn":38},{"ruleId":"204","severity":1,"message":"205","line":34,"column":70,"nodeType":"206","messageId":"207","endLine":34,"endColumn":72},{"ruleId":"204","severity":1,"message":"205","line":19,"column":63,"nodeType":"206","messageId":"207","endLine":19,"endColumn":65},{"ruleId":"195","severity":2,"message":"196","line":20,"column":9,"nodeType":"197","messageId":"198","endLine":21,"endColumn":41},{"ruleId":"204","severity":1,"message":"205","line":25,"column":66,"nodeType":"206","messageId":"207","endLine":25,"endColumn":68},{"ruleId":"191","severity":2,"message":"216","line":47,"column":5,"nodeType":"193","messageId":"194","endLine":47,"endColumn":7},{"ruleId":"217","severity":2,"message":"218","line":215,"column":50,"nodeType":"219","endLine":215,"endColumn":54},{"ruleId":"191","severity":2,"message":"216","line":136,"column":5,"nodeType":"193","messageId":"194","endLine":136,"endColumn":7},{"ruleId":"204","severity":1,"message":"205","line":19,"column":65,"nodeType":"206","messageId":"207","endLine":19,"endColumn":67},{"ruleId":"195","severity":2,"message":"196","line":20,"column":9,"nodeType":"197","messageId":"198","endLine":20,"endColumn":34},{"ruleId":"204","severity":1,"message":"205","line":24,"column":62,"nodeType":"206","messageId":"207","endLine":24,"endColumn":64},{"ruleId":"204","severity":1,"message":"205","line":19,"column":67,"nodeType":"206","messageId":"207","endLine":19,"endColumn":69},{"ruleId":"195","severity":2,"message":"196","line":20,"column":9,"nodeType":"197","messageId":"198","endLine":22,"endColumn":34},{"ruleId":"191","severity":2,"message":"220","line":26,"column":39,"nodeType":"193","messageId":"194","endLine":26,"endColumn":53},{"ruleId":"204","severity":1,"message":"205","line":26,"column":67,"nodeType":"206","messageId":"207","endLine":26,"endColumn":69},{"ruleId":"204","severity":1,"message":"205","line":19,"column":67,"nodeType":"206","messageId":"207","endLine":19,"endColumn":69},{"ruleId":"195","severity":2,"message":"196","line":20,"column":9,"nodeType":"197","messageId":"198","endLine":22,"endColumn":34},{"ruleId":"204","severity":1,"message":"205","line":26,"column":66,"nodeType":"206","messageId":"207","endLine":26,"endColumn":68},{"ruleId":"204","severity":1,"message":"205","line":19,"column":65,"nodeType":"206","messageId":"207","endLine":19,"endColumn":67},{"ruleId":"195","severity":2,"message":"196","line":20,"column":9,"nodeType":"197","messageId":"198","endLine":21,"endColumn":41},{"ruleId":"204","severity":1,"message":"205","line":25,"column":70,"nodeType":"206","messageId":"207","endLine":25,"endColumn":72},{"ruleId":"204","severity":1,"message":"205","line":19,"column":65,"nodeType":"206","messageId":"207","endLine":19,"endColumn":67},{"ruleId":"195","severity":2,"message":"196","line":20,"column":9,"nodeType":"197","messageId":"198","endLine":22,"endColumn":34},{"ruleId":"204","severity":1,"message":"205","line":26,"column":62,"nodeType":"206","messageId":"207","endLine":26,"endColumn":64},{"ruleId":"191","severity":2,"message":"221","line":63,"column":18,"nodeType":"193","messageId":"194","endLine":63,"endColumn":35},{"ruleId":"191","severity":2,"message":"222","line":65,"column":43,"nodeType":"193","messageId":"194","endLine":65,"endColumn":54},{"ruleId":"191","severity":2,"message":"216","line":89,"column":5,"nodeType":"193","messageId":"194","endLine":89,"endColumn":7},{"ruleId":"191","severity":2,"message":"216","line":38,"column":5,"nodeType":"193","messageId":"194","endLine":38,"endColumn":7},{"ruleId":"217","severity":2,"message":"218","line":137,"column":50,"nodeType":"219","endLine":137,"endColumn":54},{"ruleId":"204","severity":1,"message":"205","line":19,"column":67,"nodeType":"206","messageId":"207","endLine":19,"endColumn":69},{"ruleId":"195","severity":2,"message":"196","line":20,"column":9,"nodeType":"197","messageId":"198","endLine":20,"endColumn":35},{"ruleId":"204","severity":1,"message":"205","line":24,"column":58,"nodeType":"206","messageId":"207","endLine":24,"endColumn":60},{"ruleId":"204","severity":1,"message":"205","line":19,"column":71,"nodeType":"206","messageId":"207","endLine":19,"endColumn":73},{"ruleId":"195","severity":2,"message":"196","line":20,"column":9,"nodeType":"197","messageId":"198","endLine":20,"endColumn":35},{"ruleId":"204","severity":1,"message":"205","line":24,"column":66,"nodeType":"206","messageId":"207","endLine":24,"endColumn":68},{"ruleId":"191","severity":2,"message":"216","line":30,"column":5,"nodeType":"193","messageId":"194","endLine":30,"endColumn":7},{"ruleId":"191","severity":2,"message":"223","line":63,"column":80,"nodeType":"193","messageId":"194","endLine":63,"endColumn":90},{"ruleId":"191","severity":2,"message":"216","line":38,"column":5,"nodeType":"193","messageId":"194","endLine":38,"endColumn":7},{"ruleId":"217","severity":2,"message":"218","line":151,"column":50,"nodeType":"219","endLine":151,"endColumn":54},{"ruleId":"224","severity":1,"message":"225","line":1,"column":1,"nodeType":"226","endLine":3,"endColumn":4},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"no-undef","'Helsingcontext' is not defined.","Identifier","undef","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","'f' is not defined.","import/first","Import in body of module; reorder to top.","ImportDeclaration",{"range":"229","text":"230"},"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'ev' is not defined.","react/jsx-no-undef","'Link' is not defined.","JSXIdentifier","'CompeletedList' is not defined.","'manager_firstname' is not defined.","'association' is not defined.","'employeeId' is not defined.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",[0,106],"import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './MainNav.css'f"]