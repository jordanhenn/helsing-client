[{"/Users/lisahenn/projects/helsing-client/src/index.js":"1","/Users/lisahenn/projects/helsing-client/src/contexts/HelsingContext.js":"2","/Users/lisahenn/projects/helsing-client/src/components/App/App.js":"3","/Users/lisahenn/projects/helsing-client/src/services/HelsingAPIService.js":"4","/Users/lisahenn/projects/helsing-client/src/routes/LandingPage/LandingPage.js":"5","/Users/lisahenn/projects/helsing-client/src/routes/NotFoundPage/NotFoundPage.js":"6","/Users/lisahenn/projects/helsing-client/src/components/MainNav/MainNav.js":"7","/Users/lisahenn/projects/helsing-client/src/routes/Active/Active.js":"8","/Users/lisahenn/projects/helsing-client/src/routes/Unassigned/Unassigned.js":"9","/Users/lisahenn/projects/helsing-client/src/routes/ReserveItemPage/ReserveItemPage.js":"10","/Users/lisahenn/projects/helsing-client/src/routes/ItemsNeeded/ItemsNeeded.js":"11","/Users/lisahenn/projects/helsing-client/src/components/SearchBar/SearchBar.js":"12","/Users/lisahenn/projects/helsing-client/src/routes/Completed/Completed.js":"13","/Users/lisahenn/projects/helsing-client/src/routes/AddReserveStudy/AddReserveStudy.js":"14","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentItemPage/SustainmentItemPage.js":"15","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearOne/SustainmentYearOne.js":"16","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentCompleted/SustainmentCompleted.js":"17","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearThree/SustainmentYearThree.js":"18","/Users/lisahenn/projects/helsing-client/src/routes/DraftBilled/DraftBilled.js":"19","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearTwo/SustainmentYearTwo.js":"20","/Users/lisahenn/projects/helsing-client/src/routes/TMItemPage/TMItemPage.js":"21","/Users/lisahenn/projects/helsing-client/src/routes/AddTM/AddTM.js":"22","/Users/lisahenn/projects/helsing-client/src/routes/TMQueue/TMQueue.js":"23","/Users/lisahenn/projects/helsing-client/src/routes/TMCompleted/TMCompleted.js":"24","/Users/lisahenn/projects/helsing-client/src/routes/AddEmployee/AddEmployee.js":"25","/Users/lisahenn/projects/helsing-client/src/routes/AddSustainment/AddSustainment.js":"26","/Users/lisahenn/projects/helsing-client/src/config.js":"27","/Users/lisahenn/projects/helsing-client/src/components/ReserveNav/ReserveNav.js":"28","/Users/lisahenn/projects/helsing-client/src/components/ReserveItem/ReserveItem.js":"29","/Users/lisahenn/projects/helsing-client/src/components/SustainmentNav/SustainmentNav.js":"30","/Users/lisahenn/projects/helsing-client/src/components/TMNav/TMNav.js":"31","/Users/lisahenn/projects/helsing-client/src/components/SustainmentItem/SustainmentItem.js":"32","/Users/lisahenn/projects/helsing-client/src/components/TMItem/TMItem.js":"33"},{"size":377,"mtime":1610850435000,"results":"34","hashOfConfig":"35"},{"size":1528,"mtime":1615684160000,"results":"36","hashOfConfig":"35"},{"size":5289,"mtime":1612338767000,"results":"37","hashOfConfig":"35"},{"size":5569,"mtime":1615684857000,"results":"38","hashOfConfig":"35"},{"size":302,"mtime":1615079891000,"results":"39","hashOfConfig":"35"},{"size":274,"mtime":1615079841000,"results":"40","hashOfConfig":"35"},{"size":1120,"mtime":1615080513000,"results":"41","hashOfConfig":"35"},{"size":1984,"mtime":1615265609000,"results":"42","hashOfConfig":"35"},{"size":1932,"mtime":1615265364000,"results":"43","hashOfConfig":"35"},{"size":14089,"mtime":1615266397000,"results":"44","hashOfConfig":"35"},{"size":1915,"mtime":1615265507000,"results":"45","hashOfConfig":"35"},{"size":719,"mtime":1612334671000,"results":"46","hashOfConfig":"35"},{"size":1573,"mtime":1615265543000,"results":"47","hashOfConfig":"35"},{"size":9597,"mtime":1615081225000,"results":"48","hashOfConfig":"35"},{"size":12799,"mtime":1615266517000,"results":"49","hashOfConfig":"35"},{"size":1571,"mtime":1615265460000,"results":"50","hashOfConfig":"35"},{"size":1665,"mtime":1615266502000,"results":"51","hashOfConfig":"35"},{"size":1665,"mtime":1615265442000,"results":"52","hashOfConfig":"35"},{"size":1592,"mtime":1615265524000,"results":"53","hashOfConfig":"35"},{"size":1648,"mtime":1615265420000,"results":"54","hashOfConfig":"35"},{"size":8012,"mtime":1615264994000,"results":"55","hashOfConfig":"35"},{"size":5366,"mtime":1615081262000,"results":"56","hashOfConfig":"35"},{"size":1462,"mtime":1615265285000,"results":"57","hashOfConfig":"35"},{"size":1498,"mtime":1615265394000,"results":"58","hashOfConfig":"35"},{"size":3499,"mtime":1615693957000,"results":"59","hashOfConfig":"35"},{"size":5767,"mtime":1615081241000,"results":"60","hashOfConfig":"35"},{"size":105,"mtime":1612243886000,"results":"61","hashOfConfig":"35"},{"size":1399,"mtime":1615080696000,"results":"62","hashOfConfig":"35"},{"size":1329,"mtime":1615266750000,"results":"63","hashOfConfig":"35"},{"size":1227,"mtime":1615080717000,"results":"64","hashOfConfig":"35"},{"size":807,"mtime":1615080734000,"results":"65","hashOfConfig":"35"},{"size":1317,"mtime":1615266763000,"results":"66","hashOfConfig":"35"},{"size":1180,"mtime":1615266769000,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1ov4zqb",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/Users/lisahenn/projects/helsing-client/src/index.js",[],["149","150"],"/Users/lisahenn/projects/helsing-client/src/contexts/HelsingContext.js",[],"/Users/lisahenn/projects/helsing-client/src/components/App/App.js",[],"/Users/lisahenn/projects/helsing-client/src/services/HelsingAPIService.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/LandingPage/LandingPage.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/NotFoundPage/NotFoundPage.js",[],"/Users/lisahenn/projects/helsing-client/src/components/MainNav/MainNav.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/Active/Active.js",["151","152"],"import React, { Component } from 'react'\nimport ReserveItem from '../../components/ReserveItem/ReserveItem'\nimport ReserveNav from '../../components/ReserveNav/ReserveNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './Active.css'\n\n\nclass Active extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const ActiveList = this.context.studies.filter(study => {\n        if(study.csa === true &&\n        study.scope === true &&\n        study.retainer === true &&\n        study.ccrs === true &&\n        study.questionnaire === true &&\n        study.budget === true &&\n        study.site_plan === true &&\n        study.reserve_study === true &&\n        study.annual_review === true &&\n        study.income_statement === true &&\n        study.balance_sheet === true &&\n        study.assigned_to !== null &&\n        study.draft_billed_date === null &&\n        study.final_billed_date === null) {\n          return study\n        }\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredActiveList = ActiveList.filter(study => {\n          if(study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)) {\n            return study\n          }\n        })\n        this.setState({\n          studies: FilteredActiveList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: ActiveList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Active'>\n        <ReserveNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <ReserveItem key={study.rsId} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default Active","/Users/lisahenn/projects/helsing-client/src/routes/Unassigned/Unassigned.js",["153","154"],"import React, { Component } from 'react'\nimport ReserveItem from '../../components/ReserveItem/ReserveItem'\nimport ReserveNav from '../../components/ReserveNav/ReserveNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './Unassigned.css'\n\n\nclass Unassigned extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const UnassignedList = this.context.studies.filter(study => {\n        if(study.csa === true &&\n        study.scope === true &&\n        study.retainer === true &&\n        study.ccrs === true &&\n        study.questionnaire === true &&\n        study.budget === true &&\n        study.site_plan === true &&\n        study.reserve_study === true &&\n        study.annual_review === true &&\n        study.income_statement === true &&\n        study.balance_sheet === true &&\n        study.assigned_to === null) {\n          return study\n        }\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredUnassignedList = UnassignedList.filter(study => {\n          if(study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)){\n            return study\n          }\n        })\n        this.setState({\n          studies: FilteredUnassignedList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: UnassignedList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Unassigned'>\n        <ReserveNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <ReserveItem key={study.rs_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default Unassigned","/Users/lisahenn/projects/helsing-client/src/routes/ReserveItemPage/ReserveItemPage.js",["155","156","157"],"import React, { Component } from 'react'\nimport HelsingAPIService from '../../services/HelsingAPIService'\nimport ReserveNav from '../../components/ReserveNav/ReserveNav'\nimport Mailto from 'reactv16-mailto'\nimport './ReserveItemPage.css'\n\nclass ReserveItemPage extends Component {\n\n  static defaultProps = {\n    match: { params: {} },\n  }\n\n  state = {\n    rs_id: null,\n    association: null,\n    manager_firstname: null,\n    manager_email: null,\n    assigned_to: null,\n    date_added: null,\n    fy_end: null,\n    client_number: null,\n    date_in_queue: null,\n    total_price: null,\n    csa: null,\n    scope: null,\n    retainer: null,\n    ccrs: null,\n    hoa_questionnaire: null,\n    budget: null,\n    site_plan: null,\n    reserve_study: null,\n    annual_review: null,\n    income_statement: null,\n    balance_sheet: null,\n    draft_billed: null,\n    final_billed: null,\n    draft_billed_date: null,\n    final_billed_date: null,\n    additional_notes: null,\n    e_id: null,\n    employee_firstname: null,\n    employee_lastname: null,\n    employee_email: null,\n    employees: [],\n    updated: false,\n    updatedType: null\n  }\n\n  componentDidMount() {\n    const { reservestudyId } = this.props.match.params\n    HelsingAPIService.getRSById(reservestudyId)\n      .then(study => {\n        this.setState({\n          ...study\n        })\n        HelsingAPIService.getEmployeeById(study.assigned_to)\n        .then(employee => {\n          this.setState({\n          ...employee\n      })\n    })\n    HelsingAPIService.getAllEmployees()\n        .then(employees => {\n            this.setState({\n                employees\n            })\n        })\n  })\n}\n\n  renderManagerEmailBody() {\n    const items = ['csa', 'scope', 'retainer', 'ccrs', 'hoa_questionnaire', 'budget', 'site_plan', 'reserve_study', 'annual_review', 'income_statement', 'balance_sheet']\n    const itemNames = {\n        csa: 'Consulting Services Agreement',\n        scope: 'Scope',\n        retainer: 'Retainer',\n        ccrs: 'CC&Rs',\n        hoa_questionnaire: 'HOA Questionnaire',\n        budget: 'HOA Budget',\n        site_plan: 'Site Plan',\n        reserve_study: 'Previous Reserve Study',\n        annual_review: 'Annual Review/Year End Financials',\n        income_statement: 'Income Statement',\n        balance_sheet: 'Balance Sheet'\n    }\n    for (let i=0; i < items.length; i++) {\n        if(!this.state[items[i]]) {\n            items = items.splice[i, 1]\n        }\n    }\n\n    if(items.length > 0) {\n        let list = ''\n        for (let i=0; i < items.length; i++) {\n            if (i=0) {\n                list += itemNames[items[i]]\n            }\n            else {\n                list+= `, ${itemNames[items[i]]}`\n            }\n        }\n        let body = `\n        Hi ${this.state.manager_firstname},\n\n        This email is in regards to ${this.state.association}. We are progressing on the reserve study report, however we are still waiting to receive the following items:\n\n        ${list}\n\n        Please let us know if any of the above items are available. \n    `\n    return body\n    }\n    else {\n        return null\n    }\n  }\n\n  renderAnalystEmailBody() {\n    if(!this.state.draft_billed) {\n        let body = `\n            Hi ${this.state.employee_firstname},\n\n            Do you have a status update for ${this.state.association}? Are we ready to proceed with billing the draft?\n        `\n        return body\n    }\n    else if (this.state.draft_billed && !this.state.final_billed) {\n        let body = `\n            Hi ${this.state.employee_firstname},\n\n            Do you have a status update for ${this.state.association}? Are we ready to proceed with final billing?\n        `\n        return body\n    }\n  }\n\n  handleUpdate = (ev) => {\n    ev.preventDefault()\n    const { rs_id, association, manager_firstname, manager_email, assigned_to, fy_end, client_number, total_price, csa, scope, retainer, ccrs, hoa_questionnaire, budget, site_plan, reserve_study, annual_review, income_statement, balance_sheet, draft_billed, final_billed, additional_notes } = this.state\n    let date_in_queue = this.state.date_in_queue\n    if (csa !== null && scope !== null && retainer !== null && ccrs !== null && hoa_questionnaire !== null && budget !== null && site_plan !==null && reserve_study !== null && annual_review !== null && income_statement !== null && balance_sheet !== null && date_in_queue === null) {\n        date_in_queue = new Date()\n    }\n    const updatedInfo = { association, manager_firstname, manager_email, assigned_to, fy_end, client_number, total_price, csa, scope, retainer, ccrs, hoa_questionnaire, budget, site_plan, reserve_study, annual_review, income_statement, balance_sheet, draft_billed, final_billed, date_in_queue, additional_notes }\n    HelsingAPIService.updateReserveStudy(rs_id, updatedInfo)\n    this.setState({\n      updated: true,\n      updatedType: 'update'\n    })\n  }\n\n  handleDelete = () => {\n    const { rs_id } = this.state\n    HelsingAPIService.deleteReserveStudy(rs_id)\n    this.setState({\n      updated: true,\n      updatedType: 'delete'\n    })\n  }\n\n  componentWillUnmount() {\n      this.setState({\n        updated: false,\n        updatedType: null\n      })\n  }\n\n  render() {\n    return (\n        <div>\n        <ReserveNav/>\n        {(!this.state.updated) ?  \n        <form className='reserve-study' onSubmit={this.handleUpdate}>\n        <fieldset>\n          <legend>Reserve Study Info</legend>\n          <p>Added to job tracker on {this.state.date_added}</p>\n          {this.state.date_in_queue && \n            <p>Added to active queue on {this.state.date_in_queue}</p>}\n          {this.state.draft_billed && \n            <p>Draft billed on {this.state.draft_billed_date}</p>}\n          {this.state.final_billed && \n            <p>Final billed on {this.state.final_billed_date}</p>}\n          <label htmlFor='association_name'>\n                Association Name\n              </label>\n           <input\n                className='association_name'\n                value={this.state.association}\n                onChange={(e) => {this.setState({association: e.target.value})}}\n                type='text'\n                id='association_name'/>\n            <label htmlFor='client_number'>\n                Client #\n              </label>\n           <input\n                className='client_number'\n                value={this.state.client_number}\n                onChange={(e) => {this.setState({client_number: e.target.value})}}\n                type='text'\n                id='client_number'/>\n            <label htmlFor='client_number'>\n                FY End\n              </label>\n           <input\n                className='fy_end'\n                value={this.state.fy_end}\n                onChange={(e) => {this.setState({fy_end: e.target.value})}}\n                type='text'\n                id='fy_end'/>\n            <label htmlFor='total_price'>\n                Total Price\n              </label>\n           <input\n                className='total_price'\n                value={this.state.total_price}\n                onChange={(e) => {this.setState({total_price: e.target.value})}}\n                type='text'\n                id='total_price'/>\n           <label htmlFor='manager_firstname'>\n                Manager First Name\n              </label>\n           <input\n                className='manager_firstname'\n                value={this.state.manager_firstname}\n                onChange={(e) => {this.setState({manager_firstname: e.target.value})}}\n                type='text'\n                id='manager_firstname'/>\n          <label htmlFor='manager_email'>\n                Manager Email\n              </label>\n           <input\n                className='manager_email'\n                value={this.state.manager_email}\n                onChange={(e) => {this.setState({manager_email: e.target.value})}}\n                type='text'\n                id='manager_email'/>\n          <label htmlFor=\"assigned_to\">Assigned to:</label>\n          <select defaultValue={this.state.e_id} className=\"assigned_to\" id=\"assigned_to\" onChange={(e) => this.setState({e_id: e.target.value})}>\n              {this.state.employees.map(employee => {\n                  return (\n                      <option value={employee.e_id}>{employee.employee_firstname}</option>\n                  )\n              })}\n          </select>\n          <label htmlFor=\"csa\">CSA</label>\n          <select defaultValue={this.state.csa} className=\"csa\" id=\"csa\" onChange={(e) => this.setState({csa: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"scope\">Scope</label>\n          <select defaultValue={this.state.scope} className=\"scope\" id=\"scope\" onChange={(e) => this.setState({scope: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"retainer\">Retainer</label>\n          <select defaultValue={this.state.retainer} className=\"retainer\" id=\"retainer\" onChange={(e) => this.setState({retainer: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"ccrs\">{'CC&Rs'}</label>\n          <select defaultValue={this.state.ccrs} className=\"ccrs\" id=\"ccrs\" onChange={(e) => this.setState({ccrs: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"hoa_questionnaire\">HOA Questionnaire</label>\n          <select defaultValue={this.state.hoa_questionnaire} className=\"hoa_questionnaire\" id=\"hoa_questionnaire\" onChange={(e) => this.setState({hoa_questionnaire: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"budget\">Budget</label>\n          <select defaultValue={this.state.budget} className=\"budget\" id=\"budget\" onChange={(e) => this.setState({budget: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"site_plan\">Site Plan</label>\n          <select defaultValue={this.state.site_plan} className=\"site_plan\" id=\"site_plan\" onChange={(e) => this.setState({site_plan: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"reserve_study\">Previous Reserve Studies</label>\n          <select defaultValue={this.state.reserve_study} className=\"reserve_study\" id=\"reserve_study\" onChange={(e) => this.setState({reserve_study: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"annual_review\">Annual Review</label>\n          <select defaultValue={this.state.annual_review} className=\"annual_review\" id=\"annual_review\" onChange={(e) => this.setState({annual_review: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"income_statement\">Income Statement</label>\n          <select defaultValue={this.state.income_statement} className=\"income_statement\" id=\"income_statement\" onChange={(e) => this.setState({income_statement: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"balance_sheet\">Balance Sheet</label>\n          <select defaultValue={this.state.balance_sheet} className=\"balance_sheet\" id=\"balance_sheet\" onChange={(e) => this.setState({balance_sheet: e.target.value})}>\n                <option value={true}>Received</option>\n                <option value={false}>Not Received</option>\n          </select>\n          <label htmlFor=\"draft_billed\">Draft Billed?</label>\n          <select defaultValue={this.state.draft_billed} className=\"draft_billed\" id=\"draft_billed\" onChange={(e) => this.setState({draft_billed: e.target.value})}>\n                <option value={true}>True</option>\n                <option value={false}>False</option>\n          </select>\n          <label htmlFor=\"final_billed\">Final Billed?</label>\n          <select defaultValue={this.state.final_billed} className=\"final_billed\" id=\"final_billed\" onChange={(e) => this.setState({final_billed: e.target.value})}>\n                <option value={true}>True</option>\n                <option value={false}>False</option>\n          </select>\n          <label htmlFor=\"additional_notes\">Additional Notes:</label>\n            <textarea value={this.state.additional_notes} id=\"additional_notes\" className=\"additional_notes\" rows=\"4\" cols=\"50\" onChange={(e) => this.setState({additional_notes: e.target.value})}/>\n        </fieldset>\n        <Mailto \n            email={this.state.manager_email}\n            headers={{\n                subject: `${this.state.association} - Items Needed`,\n                body: this.renderManagerEmailBody()\n            }}>\n                Email Manager\n            </Mailto>\n        <Mailto \n            email={this.state.employee_email}\n            headers={{\n                subject: `${this.state.association} - Status Update`,\n                body: this.renderAnalystEmailBody()\n            }}>\n                Email Analyst\n            </Mailto>\n        <button className=\"update\" type='submit'>\n            UPDATE\n          </button>  \n        <button className=\"delete\" onClick={this.handleDelete}>\n          DELETE\n        </button>\n      </form> :\n      <h4>\n          This study has been {this.state.updatedType}. Please refresh the page to see the changes. \n      </h4>\n      }\n      </div>\n    )\n  }\n}\n\nexport default ReserveItemPage","/Users/lisahenn/projects/helsing-client/src/routes/ItemsNeeded/ItemsNeeded.js",["158","159"],"import React, { Component } from 'react'\nimport ReserveItem from '../../components/ReserveItem/ReserveItem'\nimport ReserveNav from '../../components/ReserveNav/ReserveNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './ItemsNeeded.css'\n\n\nclass ItemsNeeded extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const ItemsNeededList = this.context.studies.filter(study => {\n        if(study.csa === false ||\n        study.scope === false ||\n        study.retainer === false ||\n        study.ccrs === false ||\n        study.questionnaire === false ||\n        study.budget === false ||\n        study.site_plan === false ||\n        study.reserve_study === false ||\n        study.annual_review === false ||\n        study.income_statement === false ||\n        study.balance_sheet === false) {\n          return study\n        }\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredItemsNeededList = ItemsNeededList.filter(study => {\n          if(study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)) {\n            return study\n          }\n        })\n        this.setState({\n          studies: FilteredItemsNeededList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: ItemsNeededList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='ItemsNeeded'>\n        <ReserveNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <ReserveItem key={study.rs_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default ItemsNeeded","/Users/lisahenn/projects/helsing-client/src/components/SearchBar/SearchBar.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/Completed/Completed.js",["160","161"],"import React, { Component } from 'react'\nimport ReserveItem from '../../components/ReserveItem/ReserveItem'\nimport ReserveNav from '../../components/ReserveNav/ReserveNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './Completed.css'\n\n\nclass Completed extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const CompletedList = this.context.studies.filter(study => {\n        if(study.draft_billed_date !== null &&\n        study.final_billed_date !== null) {\n          return study\n        }\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredCompletedList = CompletedList.filter(study => {\n          if(study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)) {\n            return study\n          }\n        })\n        this.setState({\n          studies: FilteredCompletedList\n        })\n      }\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: CompletedList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Completed'>\n        <ReserveNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <ReserveItem key={study.rs_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default Completed","/Users/lisahenn/projects/helsing-client/src/routes/AddReserveStudy/AddReserveStudy.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/SustainmentItemPage/SustainmentItemPage.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearOne/SustainmentYearOne.js",["162","163"],"import React, { Component } from 'react'\nimport SustainmentItem from '../../components/SustainmentItem/SustainmentItem'\nimport SustainmentNav from '../../components/SustainmentNav/SustainmentNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './SustainmentYearOne.css'\n\n\nclass SustainmentYearOne extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const YearOneList = this.context.sustainment.filter(study => {\n        if(study.yr1_billed === null){\n          return study\n        }\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredYearOneList = YearOneList.filter(study => {\n          if(study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)){\n            return study\n          }\n        })\n        this.setState({\n          studies: FilteredYearOneList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: YearOneList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='YearOne'>\n        <SustainmentNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <SustainmentItem key={study.s_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default SustainmentYearOne","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentCompleted/SustainmentCompleted.js",["164","165"],"import React, { Component } from 'react'\nimport SustainmentItem from '../../components/SustainmentItem/SustainmentItem'\nimport SustainmentNav from '../../components/SustainmentNav/SustainmentNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './SustainmentCompleted.css'\n\n\nclass SustainmentCompleted extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const CompletedList = this.context.sustainment.filter(study => {\n        if(study.yr1_billed !== null &&\n        study.yr2_billed !== null &&\n        study.yr3_billed !== null) {\n          return study\n        }\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredCompletedList = CompletedList.filter(study => {\n          if(study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)) {\n            return study\n          }\n        })\n        this.setState({\n          studies: FilteredCompletedList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: CompletedList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Completed'>\n        <SustainmentNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <SustainmentItem key={study.s_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default SustainmentCompleted","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearThree/SustainmentYearThree.js",["166","167"],"import React, { Component } from 'react'\nimport SustainmentItem from '../../components/SustainmentItem/SustainmentItem'\nimport SustainmentNav from '../../components/SustainmentNav/SustainmentNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './SustainmentYearThree.css'\n\n\nclass SustainmentYearThree extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const YearThreeList = this.context.sustainment.filter(study => {\n        if(study.yr1_billed !== null &&\n        study.yr2_billed !== null &&\n        study.yr3_billed === null) {\n          return study\n        }\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredYearThreeList = YearThreeList.filter(study => {\n          if(study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)) {\n            return study\n          }\n        })\n        this.setState({\n          studies: FilteredYearThreeList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: YearThreeList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='YearThree'>\n        <SustainmentNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <SustainmentItem key={study.s_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default SustainmentYearThree","/Users/lisahenn/projects/helsing-client/src/routes/DraftBilled/DraftBilled.js",["168","169"],"import React, { Component } from 'react'\nimport ReserveItem from '../../components/ReserveItem/ReserveItem'\nimport ReserveNav from '../../components/ReserveNav/ReserveNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './DraftBilled.css'\n\n\nclass DraftBilled extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const DraftBilledList = this.context.studies.filter(study => {\n        if(study.draft_billed_date !== null &&\n        study.final_billed_date === null) {\n          return study\n        }\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredDraftBilledList = DraftBilledList.filter(study => {\n          if(study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)) {\n            return study\n          }\n        })\n        this.setState({\n          studies: FilteredDraftBilledList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: DraftBilledList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='DraftBilled'>\n        <ReserveNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <ReserveItem key={study.rs_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default DraftBilled","/Users/lisahenn/projects/helsing-client/src/routes/SustainmentYearTwo/SustainmentYearTwo.js",["170","171"],"import React, { Component } from 'react'\nimport SustainmentItem from '../../components/SustainmentItem/SustainmentItem'\nimport SustainmentNav from '../../components/SustainmentNav/SustainmentNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './SustainmentYearTwo.css'\n\n\nclass SustainmentYearTwo extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const YearTwoList = this.context.sustainment.filter(study => {\n        if(study.yr1_billed !== null &&\n        study.yr2_billed === null &&\n        study.yr3_billed === null) {\n          return study\n        }\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredYearTwoList = YearTwoList.filter(study => {\n          if(study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)) {\n            return study\n          }\n        })\n        this.setState({\n          studies: FilteredYearTwoList\n        })\n      }\n\n      if (!this.context.searchQuery.length) {\n      this.setState({ \n          studies: YearTwoList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='YearTwo'>\n        <SustainmentNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <SustainmentItem key={study.s_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default SustainmentYearTwo","/Users/lisahenn/projects/helsing-client/src/routes/TMItemPage/TMItemPage.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/AddTM/AddTM.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/TMQueue/TMQueue.js",["172","173"],"import React, { Component } from 'react'\nimport TMItem from '../../components/TMItem/TMItem'\nimport TMNav from '../../components/TMNav/TMNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './TMQueue.css'\n\n\nclass TMQueue extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const QueueList = this.context.timeAndMaterial.filter(study => {\n        if(study.billed_date === null) {\n          return study\n        }\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredQueueList = QueueList.filter(study => {\n          if(study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)) {\n            return study\n          }\n        })\n        this.setState({\n          studies: FilteredQueueList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: QueueList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Queue'>\n        <TMNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <TMItem key={study.tm_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default TMQueue","/Users/lisahenn/projects/helsing-client/src/routes/TMCompleted/TMCompleted.js",["174","175"],"import React, { Component } from 'react'\nimport TMItem from '../../components/TMItem/TMItem'\nimport TMNav from '../../components/TMNav/TMNav'\nimport HelsingContext from '../../contexts/HelsingContext'\nimport './TMCompleted.css'\n\n\nclass TMCompleted extends Component {\n  state = { studies: [] }\n\n  static getDerivedStateFromError(error) {\n    console.error(error)\n    return { hasError: true }\n  }\n\n  static contextType = HelsingContext\n\n  componentDidMount() {\n      const CompletedList = this.context.timeAndMaterial.filter(study => {\n        if(study.billed_date !== null) {\n          return study\n        }\n      })\n\n      if (this.context.searchQuery.length) {\n        const FilteredCompletedList = CompletedList.filter(study => {\n          if(study.association.toLowerCase().includes(this.context.searchQuery.toLowerCase()) ||\n          study.client_number.includes(this.context.searchQuery)) {\n            return study\n          }\n        })\n        this.setState({\n          studies: FilteredCompletedList\n        })\n      }\n\n      if(!this.context.searchQuery.length) {\n      this.setState({ \n          studies: CompletedList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='Completed'>\n        <TMNav/>\n          <ul>\n          {this.state.studies.length && this.state.studies.map(study => {\n              return (\n                  <TMItem key={study.tm_id} {...study}/>\n              )\n          })}\n          </ul>\n      </div>\n    )\n  }\n}\n\nexport default TMCompleted","/Users/lisahenn/projects/helsing-client/src/routes/AddEmployee/AddEmployee.js",[],"/Users/lisahenn/projects/helsing-client/src/routes/AddSustainment/AddSustainment.js",[],"/Users/lisahenn/projects/helsing-client/src/config.js",["176"],"export default {\n    API_ENDPOINT: process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api',\n  }","/Users/lisahenn/projects/helsing-client/src/components/ReserveNav/ReserveNav.js",[],"/Users/lisahenn/projects/helsing-client/src/components/ReserveItem/ReserveItem.js",[],"/Users/lisahenn/projects/helsing-client/src/components/SustainmentNav/SustainmentNav.js",[],["177","178"],"/Users/lisahenn/projects/helsing-client/src/components/TMNav/TMNav.js",[],"/Users/lisahenn/projects/helsing-client/src/components/SustainmentItem/SustainmentItem.js",[],"/Users/lisahenn/projects/helsing-client/src/components/TMItem/TMItem.js",[],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":19,"column":60,"nodeType":"185","messageId":"186","endLine":19,"endColumn":62},{"ruleId":"183","severity":1,"message":"184","line":39,"column":60,"nodeType":"185","messageId":"186","endLine":39,"endColumn":62},{"ruleId":"183","severity":1,"message":"184","line":19,"column":64,"nodeType":"185","messageId":"186","endLine":19,"endColumn":66},{"ruleId":"183","severity":1,"message":"184","line":37,"column":68,"nodeType":"185","messageId":"186","endLine":37,"endColumn":70},{"ruleId":"187","severity":1,"message":"188","line":88,"column":13,"nodeType":"189","messageId":"190","endLine":88,"endColumn":18},{"ruleId":"191","severity":1,"message":"192","line":88,"column":35,"nodeType":"193","messageId":"194","endLine":88,"endColumn":36},{"ruleId":"195","severity":1,"message":"196","line":95,"column":17,"nodeType":"197","messageId":"198","endLine":95,"endColumn":20},{"ruleId":"183","severity":1,"message":"184","line":19,"column":65,"nodeType":"185","messageId":"186","endLine":19,"endColumn":67},{"ruleId":"183","severity":1,"message":"184","line":36,"column":70,"nodeType":"185","messageId":"186","endLine":36,"endColumn":72},{"ruleId":"183","severity":1,"message":"184","line":19,"column":63,"nodeType":"185","messageId":"186","endLine":19,"endColumn":65},{"ruleId":"183","severity":1,"message":"184","line":27,"column":66,"nodeType":"185","messageId":"186","endLine":27,"endColumn":68},{"ruleId":"183","severity":1,"message":"184","line":19,"column":65,"nodeType":"185","messageId":"186","endLine":19,"endColumn":67},{"ruleId":"183","severity":1,"message":"184","line":26,"column":62,"nodeType":"185","messageId":"186","endLine":26,"endColumn":64},{"ruleId":"183","severity":1,"message":"184","line":19,"column":67,"nodeType":"185","messageId":"186","endLine":19,"endColumn":69},{"ruleId":"183","severity":1,"message":"184","line":28,"column":66,"nodeType":"185","messageId":"186","endLine":28,"endColumn":68},{"ruleId":"183","severity":1,"message":"184","line":19,"column":67,"nodeType":"185","messageId":"186","endLine":19,"endColumn":69},{"ruleId":"183","severity":1,"message":"184","line":28,"column":66,"nodeType":"185","messageId":"186","endLine":28,"endColumn":68},{"ruleId":"183","severity":1,"message":"184","line":19,"column":65,"nodeType":"185","messageId":"186","endLine":19,"endColumn":67},{"ruleId":"183","severity":1,"message":"184","line":27,"column":70,"nodeType":"185","messageId":"186","endLine":27,"endColumn":72},{"ruleId":"183","severity":1,"message":"184","line":19,"column":65,"nodeType":"185","messageId":"186","endLine":19,"endColumn":67},{"ruleId":"183","severity":1,"message":"184","line":28,"column":62,"nodeType":"185","messageId":"186","endLine":28,"endColumn":64},{"ruleId":"183","severity":1,"message":"184","line":19,"column":67,"nodeType":"185","messageId":"186","endLine":19,"endColumn":69},{"ruleId":"183","severity":1,"message":"184","line":26,"column":58,"nodeType":"185","messageId":"186","endLine":26,"endColumn":60},{"ruleId":"183","severity":1,"message":"184","line":19,"column":71,"nodeType":"185","messageId":"186","endLine":19,"endColumn":73},{"ruleId":"183","severity":1,"message":"184","line":26,"column":66,"nodeType":"185","messageId":"186","endLine":26,"endColumn":68},{"ruleId":"199","severity":1,"message":"200","line":1,"column":1,"nodeType":"201","endLine":3,"endColumn":4},{"ruleId":"179","replacedBy":"202"},{"ruleId":"181","replacedBy":"203"},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-const-assign","'items' is constant.","Identifier","const","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["204"],["205"],"no-global-assign","no-unsafe-negation"]